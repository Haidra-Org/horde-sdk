# generated by datamodel-codegen:
#   filename:  swagger_openapi3.json
#   timestamp: 2024-04-15T14:26:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, RootModel


class Type(Enum):
    image = "image"
    text = "text"


class ActiveModelLite(BaseModel):
    count: int | None = Field(None, description="How many of workers in this horde are running this model.")
    name: str | None = Field(None, description="The Name of a model available by workers in this horde.")


class AddTimeoutIPInput(BaseModel):
    hours: int = Field(..., description="For how many hours to put this IP in timeout.", examples=[24], ge=1, le=720)
    ipaddr: str = Field(
        ...,
        description="The IP address or CIDR to add from timeout.",
        examples=["127.0.0.1"],
        max_length=40,
        min_length=7,
    )


class AddWorkerTimeout(BaseModel):
    days: int = Field(
        ...,
        description="For how many days to put this worker's IP in timeout.",
        examples=[7],
        ge=1,
        le=30,
    )


class AestheticRating(BaseModel):
    artifacts: int | None = Field(
        None,
        description=(
            "The artifacts rating for this image.\n0 for flawless generation that perfectly fits to the prompt.\n1 for"
            " small, hardly recognizable flaws.\n2 small flaws that can easily be spotted, but don not harm the"
            " aesthetic experience.\n3 for flaws that look obviously wrong, but only mildly harm the aesthetic"
            " experience.\n4 for flaws that look obviously wrong & significantly harm the aesthetic experience.\n5 for"
            " flaws that make the image look like total garbage."
        ),
        examples=[1],
        ge=0,
        le=5,
    )
    id_: str = Field(
        ...,
        description="The UUID of image being rated.",
        examples=["6038971e-f0b0-4fdd-a3bb-148f561f815e"],
        max_length=36,
        min_length=36,
    )
    rating: int = Field(..., description="The aesthetic rating 1-10 for this image.", ge=1, le=10)


class AestheticsPayload(BaseModel):
    best: str | None = Field(
        None,
        description=(
            "The UUID of the best image in this generation batch (only used when 2+ images generated). If 2+ aesthetic"
            " ratings are also provided, then they take precedence if they're not tied."
        ),
        examples=["6038971e-f0b0-4fdd-a3bb-148f561f815e"],
        max_length=36,
        min_length=36,
    )
    ratings: list[AestheticRating] | None = None


class ContributionsDetails(BaseModel):
    fulfillments: int | None = Field(None, description="How many images this user has generated.")
    megapixelsteps: float | None = Field(None, description="How many megapixelsteps this user has generated.")


class CreateTeamInput(BaseModel):
    info: str | None = Field(
        None,
        description="Extra information or comments about this team.",
        examples=["Anarchy is emergent order."],
        max_length=1000,
        min_length=3,
    )
    name: str = Field(..., description="The name of the team. No profanity allowed!", max_length=100, min_length=3)


class DeleteTimeoutIPInput(BaseModel):
    ipaddr: str = Field(
        ...,
        description="The IP address or CIDR to remove from timeout.",
        examples=["127.0.0.1"],
        max_length=40,
        min_length=7,
    )


class DeletedTeam(BaseModel):
    deleted_id_: str | None = Field(None, description="The ID of the deleted team.")
    deleted_name: str | None = Field(None, description="The Name of the deleted team.")


class DeletedWorker(BaseModel):
    deleted_id_: str | None = Field(None, description="The ID of the deleted worker.")
    deleted_name: str | None = Field(None, description="The Name of the deleted worker.")


class ExtraSourceImage(BaseModel):
    image: str | None = Field(None, description="The Base64-encoded webp to use for further processing.")
    strength: float | None = Field(1, description="Optional field, determining the strength to use for the processing")


class FilterDetails(BaseModel):
    description: str | None = Field(None, description="Description about this regex.")
    filter_type_: int = Field(..., description="The integer defining this filter type.", examples=[10], ge=10, le=29)
    id_: str = Field(..., description="The UUID of this filter.")
    regex: str = Field(..., description="The regex for this filter.", examples=["ac.*"])
    replacement: str | None = Field("", description="The replacement string for this regex.")
    user: str = Field(..., description="The moderator which added or last updated this regex.")


class FilterPromptSuspicion(BaseModel):
    matches: list[str] | None = None
    suspicion: str = Field(
        ...,
        description="Rates how suspicious the provided prompt is. A suspicion over 2 means it would be blocked.",
    )


class FilterRegex(BaseModel):
    filter_type_: int = Field(..., description="The integer defining this filter type.", examples=[10], ge=10, le=29)
    regex: str = Field(..., description="The full regex for this filter type.")


class State(Enum):
    ok = "ok"
    censored = "censored"


class Generation(BaseModel):
    model: str | None = Field(None, description="The model which generated this image.", title="Generation Model")
    state: State = Field(
        ...,
        description="OBSOLETE (Use the gen_metadata field). The state of this generation.",
        examples=["ok"],
        title="Generation State",
    )
    worker_id_: str | None = Field(
        None,
        description="The UUID of the worker which generated this image.",
        title="Worker ID",
    )
    worker_name: str | None = Field(
        None,
        description="The name of the worker which generated this image.",
        title="Worker Name",
    )


class SourceProcessing(Enum):
    img2img = "img2img"
    inpainting = "inpainting"
    outpainting = "outpainting"
    remix = "remix"


class Type1(Enum):
    censorship = "censorship"


class Value(Enum):
    csam = "csam"


class GenerationMetadataKobold(BaseModel):
    ref: str | None = Field(
        None,
        description="Optionally a reference for the metadata (e.g. a lora ID)",
        max_length=255,
    )
    type_: Type1 = Field(..., description="The relevance of the metadata field", examples=["censorship"])
    value: Value = Field(..., description="The value of the metadata field", examples=["csam"])


class Type2(Enum):
    lora = "lora"
    ti = "ti"
    censorship = "censorship"
    source_image = "source_image"
    source_mask = "source_mask"
    extra_source_images = "extra_source_images"
    batch_index = "batch_index"


class Value1(Enum):
    download_failed = "download_failed"
    parse_failed = "parse_failed"
    baseline_mismatch = "baseline_mismatch"
    csam = "csam"
    nsfw = "nsfw"
    see_ref = "see_ref"


class GenerationMetadataStable(BaseModel):
    ref: str | None = Field(
        None,
        description="Optionally a reference for the metadata (e.g. a lora ID)",
        max_length=255,
    )
    type_: Type2 = Field(..., description="The relevance of the metadata field", examples=["lora"])
    value: Value1 = Field(..., description="The value of the metadata field", examples=["download_failed"])


class GenerationStable(Generation):
    censored: bool | None = Field(
        None,
        description="When true this image has been censored by the worker's safety filter.",
    )
    gen_metadata: list[GenerationMetadataStable] | None = None
    id_: str | None = Field(None, description="The ID for this image.", title="Generation ID")
    img: str | None = Field(
        None,
        description="The generated image as a Base64-encoded .webp file.",
        title="Generated Image",
    )
    seed: str | None = Field(None, description="The seed which generated this image.", title="Generation Seed")


class GenerationSubmitted(BaseModel):
    reward: float | None = Field(
        None,
        description="The amount of kudos gained for submitting this request.",
        examples=[10],
    )


class HordeModes(BaseModel):
    invite_only_mode: bool | None = Field(
        None,
        description="When True, this horde will not only accept worker explicitly invited to join.",
    )
    maintenance_mode: bool | None = Field(
        None,
        description=(
            "When True, this horde will not accept new requests for image generation, but will finish processing the"
            " ones currently in the queue."
        ),
    )
    raid_mode: bool | None = Field(
        None,
        description="When True, this horde will not always provide full information in order to throw off attackers.",
    )


class HordePerformance(BaseModel):
    interrogator_count: int | None = Field(
        None,
        description=(
            "How many workers are actively processing image interrogations in this {horde_noun} in the past 5 minutes."
        ),
    )
    interrogator_thread_count: int | None = Field(
        None,
        description=(
            "How many worker threads are actively processing image interrogation in this {horde_noun} in the past 5"
            " minutes."
        ),
    )
    past_minute_megapixelsteps: float | None = Field(
        None,
        description="How many megapixelsteps this horde generated in the last minute.",
    )
    past_minute_tokens: float | None = Field(
        None,
        description="How many tokens this horde generated in the last minute.",
    )
    queued_forms: float | None = Field(
        None,
        description="The amount of image interrogations waiting and processing currently in this horde.",
    )
    queued_megapixelsteps: float | None = Field(
        None,
        description="The amount of megapixelsteps in waiting and processing requests currently in this horde.",
    )
    queued_requests: int | None = Field(
        None,
        description="The amount of waiting and processing image requests currently in this horde.",
    )
    queued_text_requests: int | None = Field(
        None,
        description="The amount of waiting and processing text requests currently in this horde.",
    )
    queued_tokens: float | None = Field(
        None,
        description="The amount of tokens in waiting and processing requests currently in this horde.",
    )
    text_thread_count: int | None = Field(
        None,
        description=(
            "How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5"
            " minutes."
        ),
    )
    text_worker_count: int | None = Field(
        None,
        description="How many workers are actively processing prompt generations in this horde in the past 5 minutes.",
    )
    thread_count: int | None = Field(
        None,
        description=(
            "How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5"
            " minutes."
        ),
    )
    worker_count: int | None = Field(
        None,
        description="How many workers are actively processing prompt generations in this horde in the past 5 minutes.",
    )


class IPTimeout(BaseModel):
    ipaddr: str = Field(
        ...,
        description="The CIDR which is in timeout.",
        examples=["127.0.0.1"],
        max_length=40,
        min_length=7,
    )
    seconds: int = Field(..., description="How many more seconds this IP block is in timeout ", examples=[1440])


class InterrogationFormResult(BaseModel):
    field_: dict[str, dict[str, Any]] | None = Field(None, alias="*")


class InterrogationFormStatus(BaseModel):
    form: str | None = Field(None, description="The name of this interrogation form.")
    result: InterrogationFormResult | None = None
    state: str | None = Field(
        None,
        description="The overall status of this interrogation.",
        title="Interrogation State",
    )


class Form(Enum):
    caption = "caption"
    interrogation = "interrogation"
    nsfw_ = "nsfw."
    GFPGAN = "GFPGAN"
    RealESRGAN_x4plus = "RealESRGAN_x4plus"
    RealESRGAN_x2plus = "RealESRGAN_x2plus"
    RealESRGAN_x4plus_anime_6B = "RealESRGAN_x4plus_anime_6B"
    NMKD_Siax = "NMKD_Siax"
    field_4x_AnimeSharp = "4x_AnimeSharp"
    CodeFormers = "CodeFormers"
    strip_background = "strip_background"


class Form1(Enum):
    caption = "caption"
    interrogation = "interrogation"
    nsfw = "nsfw"
    GFPGAN = "GFPGAN"
    RealESRGAN_x4plus = "RealESRGAN_x4plus"
    RealESRGAN_x2plus = "RealESRGAN_x2plus"
    RealESRGAN_x4plus_anime_6B = "RealESRGAN_x4plus_anime_6B"
    NMKD_Siax = "NMKD_Siax"
    field_4x_AnimeSharp = "4x_AnimeSharp"
    CodeFormers = "CodeFormers"
    strip_background = "strip_background"


class InterrogationPopInput(BaseModel):
    amount: int | None = Field(1, description="The amount of forms to pop at the same time.")
    bridge_agent: str | None = Field(
        "unknown",
        description="The worker name, version and website.",
        examples=["AI Horde Worker reGen:4.1.0:https://github.com/Haidra-Org/horde-worker-reGen"],
        max_length=1000,
    )
    forms: list[Form1] | None = None
    max_tiles: int | None = Field(
        16,
        description="The maximum amount of 512x512 tiles this worker can post-process.",
        ge=1,
        le=256,
    )
    name: str | None = Field(None, description="The Name of the Worker.")
    priority_usernames: list[str] | None = None
    threads: int | None = Field(
        1,
        description=(
            "How many threads this worker is running. This is used to accurately the current power available in the"
            " horde."
        ),
        ge=1,
        le=100,
    )


class InterrogationStatus(BaseModel):
    forms: list[InterrogationFormStatus] | None = None
    state: str | None = Field(
        None,
        description="The overall status of this interrogation.",
        title="Interrogation State",
    )


class KudosAwarded(BaseModel):
    awarded: float | None = Field(None, description="The amount of Kudos awarded.", examples=[100])


class KudosTransferred(BaseModel):
    transferred: float | None = Field(None, description="The amount of Kudos tranferred.", examples=[100])


class ModelInterrogationFormPayloadStable(BaseModel):
    field_: dict[str, str] | None = Field(None, alias="*")


class Name(Enum):
    caption = "caption"
    interrogation = "interrogation"
    nsfw = "nsfw"
    GFPGAN = "GFPGAN"
    RealESRGAN_x4plus = "RealESRGAN_x4plus"
    RealESRGAN_x2plus = "RealESRGAN_x2plus"
    RealESRGAN_x4plus_anime_6B = "RealESRGAN_x4plus_anime_6B"
    NMKD_Siax = "NMKD_Siax"
    field_4x_AnimeSharp = "4x_AnimeSharp"
    CodeFormers = "CodeFormers"
    strip_background = "strip_background"


class ModelInterrogationFormStable(BaseModel):
    name: Name = Field(..., description="The type of interrogation this is.", examples=["caption"])
    payload: ModelInterrogationFormPayloadStable | None = None


class ModelInterrogationInputStable(BaseModel):
    forms: list[ModelInterrogationFormStable] | None = None
    slow_workers: bool | None = Field(
        True,
        description=(
            "When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost."
        ),
    )
    source_image: str | None = Field(None, description="The public URL of the image to interrogate.")
    webhook: str | None = Field(
        None,
        description=(
            "Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will"
            " include the details of the job as well as the request ID."
        ),
        examples=["https://haidra.net/00000000-0000-0000-0000-000000000000"],
        max_length=1024,
        min_length=10,
    )


class ModelPayload(BaseModel):
    n: int | None = Field(None, description="The amount of images to generate.", examples=[1])
    prompt: str | None = Field(
        None,
        description="The prompt which will be sent to the horde against which to run inference.",
    )
    seed: str | None = Field(None, description="The seed to use to generete this request.")


class ModelPayloadLorasStable(BaseModel):
    clip: float | None = Field(1, description="The strength of the LoRa to apply to the clip model.", ge=-5.0, le=5.0)
    inject_trigger: str | None = Field(
        None,
        description=(
            "If set, will try to discover a trigger for this LoRa which matches or is similar to this string and"
            " inject it into the prompt. If 'any' is specified it will be pick the first trigger."
        ),
        max_length=30,
        min_length=1,
    )
    is_version: bool | None = Field(
        False,
        description=(
            "If true, will consider the LoRa ID as a CivitAI version ID and search accordingly. Ensure the name is an"
            " integer."
        ),
    )
    model: float | None = Field(1, description="The strength of the LoRa to apply to the SD model.", ge=-5.0, le=5.0)
    name: str = Field(
        ...,
        description=(
            "The exact name or CivitAI Model Page ID of the LoRa. If is_version is true, this should be the CivitAI"
            " version ID."
        ),
        examples=["Magnagothica"],
        max_length=255,
        min_length=1,
    )


class ModelPayloadRootKobold(BaseModel):
    dynatemp_exponent: float | None = Field(1, description="Dynamic temperature exponent value.", ge=0.0, le=5.0)
    dynatemp_range: float | None = Field(0, description="Dynamic temperature range value.", ge=0.0, le=5.0)
    frmtadsnsp: bool | None = Field(
        None,
        description=(
            "Input formatting option. When enabled, adds a leading space to your input if there is no trailing"
            " whitespace at the end of the previous action."
        ),
        examples=[
            False,
        ],
    )
    frmtrmblln: bool | None = Field(
        None,
        description=(
            "Output formatting option. When enabled, replaces all occurrences of two or more consecutive newlines in"
            " the output with one newline."
        ),
        examples=[
            False,
        ],
    )
    frmtrmspch: bool | None = Field(
        None,
        description="Output formatting option. When enabled, removes #/@%}{+=~|\\^<> from the output.",
        examples=[
            False,
        ],
    )
    frmttriminc: bool | None = Field(
        None,
        description=(
            "Output formatting option. When enabled, removes some characters from the end of the output such that the"
            " output doesn't end in the middle of a sentence. If the output is less than one sentence long, does"
            " nothing."
        ),
        examples=[
            False,
        ],
    )
    max_context_length: int | None = Field(
        1024,
        description="Maximum number of tokens to send to the model.",
        ge=80,
        le=32000,
    )
    max_length: int | None = Field(80, description="Number of tokens to generate.", ge=16, le=1024)
    min_p: float | None = Field(0, description="Min-p sampling value.", ge=0.0, le=1.0)
    n: int | None = Field(None, examples=[1], ge=1, le=20)
    rep_pen: float | None = Field(None, description="Base repetition penalty value.", ge=1.0, le=3.0)
    rep_pen_range: int | None = Field(None, description="Repetition penalty range.", ge=0, le=4096)
    rep_pen_slope: float | None = Field(None, description="Repetition penalty slope.", ge=0.0, le=10.0)
    sampler_order: list[int] | None = None
    singleline: bool | None = Field(
        None,
        description=(
            "Output formatting option. When enabled, removes everything after the first line of the output, including"
            " the newline."
        ),
        examples=[
            False,
        ],
    )
    smoothing_factor: float | None = Field(0, description="Quadratic sampling value.", ge=0.0, le=10.0)
    stop_sequence: list[str] | None = None
    temperature: float | None = Field(None, description="Temperature value.", ge=0.0, le=5.0)
    tfs: float | None = Field(None, description="Tail free sampling value.", ge=0.0, le=1.0)
    top_a: float | None = Field(None, description="Top-a sampling value.", ge=0.0, le=1.0)
    top_k: int | None = Field(None, description="Top-k sampling value.", ge=0, le=100)
    top_p: float | None = Field(None, description="Top-p sampling value.", ge=0.001, le=1.0)
    typical: float | None = Field(None, description="Typical sampling value.", ge=0.0, le=1.0)
    use_default_badwordsids: bool | None = Field(
        None,
        description="When True, uses the default KoboldAI bad word IDs.",
        examples=[True],
    )


class ControlType(Enum):
    canny = "canny"
    hed = "hed"
    depth = "depth"
    normal = "normal"
    openpose = "openpose"
    seg = "seg"
    scribble = "scribble"
    fakescribbles = "fakescribbles"
    hough = "hough"


class PostProcessingEnum(Enum):
    GFPGAN = "GFPGAN"
    RealESRGAN_x4plus = "RealESRGAN_x4plus"
    RealESRGAN_x2plus = "RealESRGAN_x2plus"
    RealESRGAN_x4plus_anime_6B = "RealESRGAN_x4plus_anime_6B"
    NMKD_Siax = "NMKD_Siax"
    field_4x_AnimeSharp = "4x_AnimeSharp"
    CodeFormers = "CodeFormers"
    strip_background = "strip_background"


class SamplerName(Enum):
    k_euler = "k_euler"
    lcm = "lcm"
    k_euler_a = "k_euler_a"
    k_dpmpp_2s_a = "k_dpmpp_2s_a"
    DDIM = "DDIM"
    dpmsolver = "dpmsolver"
    k_lms = "k_lms"
    k_dpm_fast = "k_dpm_fast"
    k_dpmpp_sde = "k_dpmpp_sde"
    k_dpm_2 = "k_dpm_2"
    k_dpm_2_a = "k_dpm_2_a"
    k_dpm_adaptive = "k_dpm_adaptive"
    k_heun = "k_heun"
    k_dpmpp_2m = "k_dpmpp_2m"


class InjectTi(Enum):
    prompt = "prompt"
    negprompt = "negprompt"


class ModelPayloadTextualInversionsStable(BaseModel):
    inject_ti: InjectTi | None = Field(
        None,
        description=(
            "If set, Will automatically add this TI filename to the prompt or negative prompt accordingly using the"
            " provided strength. If this is set to None, then the user will have to manually add the embed to the"
            " prompt themselves."
        ),
        examples=[
            "prompt",
        ],
    )
    name: str = Field(
        ...,
        description="The exact name or CivitAI ID of the Textual Inversion.",
        examples=["7808"],
        max_length=255,
        min_length=1,
    )
    strength: float | None = Field(
        1,
        description="The strength with which to apply the TI to the prompt. Only used when inject_ti is not None",
        ge=-5.0,
        le=5.0,
    )


class ModelSpecialPayloadStable(BaseModel):
    field_: dict[str, dict[str, Any]] | None = Field(None, alias="*")


class ModifyTeam(BaseModel):
    info: str | None = Field(None, description="The Info of the team.")
    id_: str | None = Field(None, description="The ID of the team.")
    name: str | None = Field(None, description="The Name of the team.")


class ModifyTeamInput(BaseModel):
    info: str | None = Field(
        None,
        description="Extra information or comments about this team.",
        examples=["Anarchy is emergent order."],
        max_length=1000,
        min_length=3,
    )
    name: str | None = Field(
        None,
        description="The name of the team. No profanity allowed!",
        max_length=100,
        min_length=3,
    )


class ModifyUser(BaseModel):
    admin_comment: str | None = Field(
        None,
        description="The new admin comment.",
        examples=["User is sus"],
        max_length=500,
        min_length=5,
    )
    concurrency: int | None = Field(
        None,
        description="The request concurrency this user has after this request.",
        examples=[30],
    )
    contact: str | None = Field(None, description="The new contact details.", examples=["email@example.com"])
    customizer: bool | None = Field(None, description="The user's new customizer status.")
    education: bool | None = Field(None, description="The user's new education status.")
    flagged: bool | None = Field(None, description="The user's new flagged status.")
    moderator: bool | None = Field(None, description="The user's new moderator status.", examples=[False])
    monthly_kudos: int | None = Field(None, description="The user's new monthly kudos total.", examples=[0])
    new_kudos: float | None = Field(None, description="The new total Kudos this user has after this request.")
    new_suspicion: int | None = Field(None, description="The user's new suspiciousness rating.")
    public_workers: bool | None = Field(None, description="The user's new public_workers status.", examples=[False])
    service: bool | None = Field(None, description="The user's new service status.")
    special: bool | None = Field(None, description="The user's new special status.")
    trusted: bool | None = Field(None, description="The user's new trusted status.")
    usage_multiplier: float | None = Field(
        None,
        description="Multiplies the amount of kudos lost when generating images.",
        examples=[1],
    )
    username: str | None = Field(None, description="The user's new username.", examples=["username#1"])
    vpn: bool | None = Field(None, description="The user's new vpn status.")
    worker_invited: int | None = Field(
        None,
        description=(
            "Whether this user has been invited to join a worker to the horde and how many of them. When 0, this user"
            " cannot add (new) workers to the horde."
        ),
        examples=[
            1,
        ],
    )


class ModifyUserInput(BaseModel):
    admin_comment: str | None = Field(
        None,
        description="Add further information about this user for the other admins.",
        examples=["User is sus"],
        max_length=500,
        min_length=5,
    )
    concurrency: int | None = Field(
        None,
        description="The amount of concurrent request this user can have.",
        ge=0,
        le=500,
    )
    contact: str | None = Field(
        None,
        description=(
            "Contact details for the horde admins to reach the user in case of emergency. This is only visible to"
            " horde moderators."
        ),
        examples=["email@example.com"],
        max_length=500,
        min_length=5,
    )
    customizer: bool | None = Field(
        None,
        description=(
            "When set to true, the user will be able to serve custom Stable Diffusion models which do not exist in the"
            " Official AI Horde Model Reference."
        ),
        examples=[
            False,
        ],
    )
    education: bool | None = Field(
        None,
        description=(
            "When set to true, the user is considered an education account and some options become more restrictive."
        ),
        examples=[
            False,
        ],
    )
    filtered: bool | None = Field(
        None,
        description="When set to true, the replacement filter will always be applied against this user",
        examples=[
            False,
        ],
    )
    flagged: bool | None = Field(
        None,
        description=(
            "When set to true, the user cannot tranfer kudos and all their workers are put into permanent maintenance."
        ),
        examples=[
            False,
        ],
    )
    kudos: float | None = Field(None, description="The amount of kudos to modify (can be negative).")
    moderator: bool | None = Field(
        None,
        description="Set to true to make this user a horde moderator.",
        examples=[False],
    )
    monthly_kudos: int | None = Field(
        None,
        description="When specified, will start assigning the user monthly kudos, starting now!",
    )
    public_workers: bool | None = Field(
        None,
        description="Set to true to make this user display their worker IDs.",
        examples=[False],
    )
    reset_suspicion: bool | None = Field(None, description="Set the user's suspicion back to 0.")
    service: bool | None = Field(
        None,
        description=(
            "When set to true, the user is considered a service account proxying the requests for other users."
        ),
        examples=[
            False,
        ],
    )
    special: bool | None = Field(
        None,
        description="When set to true, The user can send special payloads.",
        examples=[False],
    )
    trusted: bool | None = Field(
        None,
        description="When set to true,the user and their servers will not be affected by suspicion.",
        examples=[
            False,
        ],
    )
    usage_multiplier: float | None = Field(
        None,
        description="The amount by which to multiply the users kudos consumption.",
        ge=0.1,
        le=10.0,
    )
    username: str | None = Field(
        None,
        description="When specified, will change the username. No profanity allowed!",
        max_length=100,
        min_length=3,
    )
    vpn: bool | None = Field(
        None,
        description=(
            "When set to true, the user will be able to onboard workers behind a VPN. This should be used as a"
            " temporary solution until the user is trusted."
        ),
        examples=[
            False,
        ],
    )
    worker_invited: int | None = Field(
        None,
        description=(
            "Set to the amount of workers this user is allowed to join to the horde when in worker invite-only mode."
        ),
    )


class ModifyWorker(BaseModel):
    info: str | None = Field(None, description="The new state of the 'info' var for this worker.")
    maintenance: bool | None = Field(
        None,
        description=(
            "The new state of the 'maintenance' var for this worker. When True, this worker will not pick up any new"
            " requests."
        ),
    )
    name: str | None = Field(None, description="The new name for this this worker.")
    paused: bool | None = Field(
        None,
        description=(
            "The new state of the 'paused' var for this worker. When True, this worker will not be given any new"
            " requests."
        ),
    )
    team: str | None = Field(None, description="The new team of this worker.", examples=["Direct Action"])


class ModifyWorkerInput(BaseModel):
    info: str | None = Field(
        None,
        description=(
            "You can optionally provide a server note which will be seen in the server details. No profanity allowed!"
        ),
        max_length=1000,
    )
    maintenance: bool | None = Field(None, description="Set to true to put this worker into maintenance.")
    maintenance_msg: str | None = Field(
        None,
        description=(
            "if maintenance is True, you can optionally provide a message to be used instead of the default"
            " maintenance message, so that the owner is informed."
        ),
    )
    name: str | None = Field(
        None,
        description="When this is set, it will change the worker's name. No profanity allowed!",
        max_length=100,
        min_length=5,
    )
    paused: bool | None = Field(None, description="(Mods only) Set to true to pause this worker.")
    team: str | None = Field(
        None,
        description=(
            "The team towards which this worker contributes kudos.  It an empty string ('') is passed, it will leave"
            " the worker without a team. No profanity allowed!"
        ),
        examples=["0bed257b-e57c-4327-ac64-40cdfb1ac5e6"],
        max_length=36,
    )


class MonthlyKudos(BaseModel):
    amount: int | None = Field(None, description="How much recurring Kudos this user receives monthly.")
    last_received: datetime | None = Field(None, description="Last date this user received monthly Kudos.")


class Newspiece(BaseModel):
    date_published: str | None = Field(None, description="The date this newspiece was published.")
    importance: str | None = Field(None, description="How critical this piece of news is.", examples=["Information"])
    newspiece: str | None = Field(None, description="The actual piece of news.")


class NoValidInterrogationsFound(BaseModel):
    bridge_version: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they require a higher version of the bridge than this"
            " worker is running (upgrade if you see this in your skipped list)."
        ),
        examples=[0],
        ge=0,
    )
    untrusted: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they demanded a trusted worker which this worker is not."
        ),
        ge=0,
    )
    worker_id_: int | None = Field(
        None,
        description="How many waiting requests were skipped because they demanded a specific worker.",
        ge=0,
    )


class NoValidRequestFound(BaseModel):
    blacklist: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they demanded a generation with a word that this worker"
            " does not accept."
        ),
        ge=0,
    )
    bridge_version: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they require a higher version of the bridge than this"
            " worker is running (upgrade if you see this in your skipped list)."
        ),
        examples=[0],
        ge=0,
    )
    kudos: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because the user didn't have enough kudos when this worker"
            " requires upfront kudos."
        ),
    )
    models: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they demanded a different model than what this worker"
            " provides."
        ),
        examples=[0],
        ge=0,
    )
    nsfw: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they demanded a nsfw generation which this worker does not"
            " provide."
        ),
        ge=0,
    )
    performance: int | None = Field(
        None,
        description="How many waiting requests were skipped because they required higher performance.",
        ge=0,
    )
    untrusted: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they demanded a trusted worker which this worker is not."
        ),
        ge=0,
    )
    worker_id_: int | None = Field(
        None,
        description="How many waiting requests were skipped because they demanded a specific worker.",
        ge=0,
    )


class NoValidRequestFoundStable(NoValidRequestFound):
    controlnet: int | None = Field(
        None,
        description="How many waiting requests were skipped because they requested a controlnet.",
    )
    img2img: int | None = Field(
        None,
        description="How many waiting requests were skipped because they requested img2img.",
    )
    lora: int | None = Field(None, description="How many waiting requests were skipped because they requested loras.")
    max_pixels: int | None = Field(
        None,
        description=(
            "How many waiting requests were skipped because they demanded a higher size than this worker provides."
        ),
    )
    painting: int | None = Field(
        None,
        description="How many waiting requests were skipped because they requested inpainting/outpainting.",
    )
    post_processing: int | None = Field(
        None,
        alias="post-processing",
        description="How many waiting requests were skipped because they requested post-processing.",
    )
    unsafe_ip: int | None = Field(
        None,
        description="How many waiting requests were skipped because they came from an unsafe IP.",
    )


class PatchExistingFilter(BaseModel):
    description: str | None = Field(None, description="Description about this regex.")
    filter_type_: int | None = Field(
        None,
        description="The integer defining this filter type.",
        examples=[10],
        ge=10,
        le=29,
    )
    regex: str | None = Field(None, description="The regex for this filter.", examples=["ac.*"])
    replacement: str | None = Field("", description="The replacement string for this regex.")


class Model(RootModel[str]):
    root: str = Field(..., description="Which models this worker is serving.", max_length=255, min_length=3)


class PopInput(BaseModel):
    amount: int | None = Field(1, description="How many jobvs to pop at the same time", ge=1, le=20)
    bridge_agent: str | None = Field(
        "unknown:0:unknown",
        description="The worker name, version and website.",
        examples=["AI Horde Worker reGen:4.1.0:https://github.com/Haidra-Org/horde-worker-reGen"],
        max_length=1000,
    )
    models: list[Model] | None = None
    name: str | None = Field(None, description="The Name of the Worker.")
    nsfw: bool | None = Field(False, description="Whether this worker can generate NSFW requests or not.")
    priority_usernames: list[str] | None = None
    require_upfront_kudos: bool | None = Field(
        False,
        description=(
            "If True, this worker will only pick up requests where the owner has the required kudos to consume already"
            " available."
        ),
        examples=[
            False,
        ],
    )
    threads: int | None = Field(
        1,
        description=(
            "How many threads this worker is running. This is used to accurately the current power available in the"
            " horde."
        ),
        ge=1,
        le=50,
    )


class PopInputKobold(PopInput):
    max_context_length: int | None = Field(
        2048,
        description="The max amount of context to submit to this AI for sampling.",
    )
    max_length: int | None = Field(512, description="The maximum amount of tokens this worker can generate.")
    softprompts: list[str] | None = None


class PopInputStable(PopInput):
    allow_controlnet: bool | None = Field(
        True,
        description="If True, this worker will pick up requests requesting ControlNet.",
    )
    allow_img2img: bool | None = Field(True, description="If True, this worker will pick up img2img requests.")
    allow_lora: bool | None = Field(True, description="If True, this worker will pick up requests requesting LoRas.")
    allow_painting: bool | None = Field(
        True,
        description="If True, this worker will pick up inpainting/outpainting requests.",
    )
    allow_post_processing: bool | None = Field(
        True,
        description="If True, this worker will pick up requests requesting post-processing.",
    )
    allow_unsafe_ipaddr: bool | None = Field(
        True,
        description="If True, this worker will pick up img2img requests coming from clients with an unsafe IP.",
    )
    blacklist: list[str] | None = None
    max_pixels: int | None = Field(262144, description="The maximum amount of pixels this worker can generate.")


class PutNewFilter(BaseModel):
    description: str | None = Field(None, description="Description about this regex.")
    filter_type_: int = Field(..., description="The integer defining this filter type.", examples=[10], ge=10, le=29)
    regex: str = Field(..., description="The regex for this filter.", examples=["ac.*"])
    replacement: str | None = Field("", description="The replacement string for this regex.")


class Rc(Enum):
    MissingPrompt = "MissingPrompt"
    CorruptPrompt = "CorruptPrompt"
    KudosValidationError = "KudosValidationError"
    NoValidActions = "NoValidActions"
    InvalidSize = "InvalidSize"
    InvalidPromptSize = "InvalidPromptSize"
    TooManySteps = "TooManySteps"
    Profanity = "Profanity"
    ProfaneWorkerName = "ProfaneWorkerName"
    ProfaneBridgeAgent = "ProfaneBridgeAgent"
    ProfaneWorkerInfo = "ProfaneWorkerInfo"
    ProfaneUserName = "ProfaneUserName"
    ProfaneUserContact = "ProfaneUserContact"
    ProfaneAdminComment = "ProfaneAdminComment"
    ProfaneTeamName = "ProfaneTeamName"
    ProfaneTeamInfo = "ProfaneTeamInfo"
    TooLong = "TooLong"
    TooLongWorkerName = "TooLongWorkerName"
    TooLongUserName = "TooLongUserName"
    NameAlreadyExists = "NameAlreadyExists"
    WorkerNameAlreadyExists = "WorkerNameAlreadyExists"
    TeamNameAlreadyExists = "TeamNameAlreadyExists"
    PolymorphicNameConflict = "PolymorphicNameConflict"
    ImageValidationFailed = "ImageValidationFailed"
    SourceImageResolutionExceeded = "SourceImageResolutionExceeded"
    SourceImageSizeExceeded = "SourceImageSizeExceeded"
    SourceImageUrlInvalid = "SourceImageUrlInvalid"
    SourceImageUnreadable = "SourceImageUnreadable"
    InpaintingMissingMask = "InpaintingMissingMask"
    SourceMaskUnnecessary = "SourceMaskUnnecessary"
    UnsupportedSampler = "UnsupportedSampler"
    UnsupportedModel = "UnsupportedModel"
    ControlNetUnsupported = "ControlNetUnsupported"
    ControlNetSourceMissing = "ControlNetSourceMissing"
    ControlNetInvalidPayload = "ControlNetInvalidPayload"
    SourceImageRequiredForModel = "SourceImageRequiredForModel"
    UnexpectedModelName = "UnexpectedModelName"
    TooManyUpscalers = "TooManyUpscalers"
    ProcGenNotFound = "ProcGenNotFound"
    InvalidAestheticAttempt = "InvalidAestheticAttempt"
    AestheticsNotCompleted = "AestheticsNotCompleted"
    AestheticsNotPublic = "AestheticsNotPublic"
    AestheticsDuplicate = "AestheticsDuplicate"
    AestheticsMissing = "AestheticsMissing"
    AestheticsSolo = "AestheticsSolo"
    AestheticsConfused = "AestheticsConfused"
    AestheticsAlreadyExist = "AestheticsAlreadyExist"
    AestheticsServerRejected = "AestheticsServerRejected"
    AestheticsServerError = "AestheticsServerError"
    AestheticsServerDown = "AestheticsServerDown"
    AestheticsServerTimeout = "AestheticsServerTimeout"
    InvalidAPIKey = "InvalidAPIKey"
    WrongCredentials = "WrongCredentials"
    NotAdmin = "NotAdmin"
    NotModerator = "NotModerator"
    NotOwner = "NotOwner"
    NotPrivileged = "NotPrivileged"
    AnonForbidden = "AnonForbidden"
    AnonForbiddenWorker = "AnonForbiddenWorker"
    AnonForbiddenUserMod = "AnonForbiddenUserMod"
    NotTrusted = "NotTrusted"
    UntrustedTeamCreation = "UntrustedTeamCreation"
    UntrustedUnsafeIP = "UntrustedUnsafeIP"
    WorkerMaintenance = "WorkerMaintenance"
    WorkerFlaggedMaintenance = "WorkerFlaggedMaintenance"
    TooManySameIPs = "TooManySameIPs"
    WorkerInviteOnly = "WorkerInviteOnly"
    UnsafeIP = "UnsafeIP"
    TimeoutIP = "TimeoutIP"
    TooManyNewIPs = "TooManyNewIPs"
    KudosUpfront = "KudosUpfront"
    SharedKeyEmpty = "SharedKeyEmpty"
    SharedKeyExpired = "SharedKeyExpired"
    SharedKeyInsufficientKudos = "SharedKeyInsufficientKudos"
    InvalidJobID = "InvalidJobID"
    RequestNotFound = "RequestNotFound"
    WorkerNotFound = "WorkerNotFound"
    TeamNotFound = "TeamNotFound"
    FilterNotFound = "FilterNotFound"
    UserNotFound = "UserNotFound"
    DuplicateGen = "DuplicateGen"
    AbortedGen = "AbortedGen"
    RequestExpired = "RequestExpired"
    TooManyPrompts = "TooManyPrompts"
    NoValidWorkers = "NoValidWorkers"
    MaintenanceMode = "MaintenanceMode"
    TargetAccountFlagged = "TargetAccountFlagged"
    SourceAccountFlagged = "SourceAccountFlagged"
    FaultWhenKudosReceiving = "FaultWhenKudosReceiving"
    FaultWhenKudosSending = "FaultWhenKudosSending"
    TooFastKudosTransfers = "TooFastKudosTransfers"
    KudosTransferToAnon = "KudosTransferToAnon"
    KudosTransferToSelf = "KudosTransferToSelf"
    KudosTransferNotEnough = "KudosTransferNotEnough"
    NegativeKudosTransfer = "NegativeKudosTransfer"
    KudosTransferFromAnon = "KudosTransferFromAnon"
    InvalidAwardUsername = "InvalidAwardUsername"
    KudosAwardToAnon = "KudosAwardToAnon"
    NotAllowedAwards = "NotAllowedAwards"
    NoWorkerModSelected = "NoWorkerModSelected"
    NoUserModSelected = "NoUserModSelected"
    NoHordeModSelected = "NoHordeModSelected"
    NoTeamModSelected = "NoTeamModSelected"
    NoFilterModSelected = "NoFilterModSelected"
    NoSharedKeyModSelected = "NoSharedKeyModSelected"
    BadRequest = "BadRequest"
    Forbidden = "Forbidden"
    Locked = "Locked"
    ControlNetMismatch = "ControlNetMismatch"
    HiResFixMismatch = "HiResFixMismatch"
    TooManyLoras = "TooManyLoras"
    BadLoraVersion = "BadLoraVersion"
    TooManyTIs = "TooManyTIs"
    BetaAnonForbidden = "BetaAnonForbidden"
    BetaComparisonFault = "BetaComparisonFault"
    BadCFGDecimals = "BadCFGDecimals"
    BadCFGNumber = "BadCFGNumber"
    BadClientAgent = "BadClientAgent"
    SpecialMissingPayload = "SpecialMissingPayload"
    SpecialForbidden = "SpecialForbidden"
    SpecialMissingUsername = "SpecialMissingUsername"
    SpecialModelNeedsSpecialUser = "SpecialModelNeedsSpecialUser"
    SpecialFieldNeedsSpecialUser = "SpecialFieldNeedsSpecialUser"
    Img2ImgMismatch = "Img2ImgMismatch"
    TilingMismatch = "TilingMismatch"
    EducationCannotSendKudos = "EducationCannotSendKudos"
    InvalidPriorityUsername = "InvalidPriorityUsername"
    OnlyServiceAccountProxy = "OnlyServiceAccountProxy"
    RequiresTrust = "RequiresTrust"
    InvalidRemixModel = "InvalidRemixModel"
    InvalidExtraSourceImages = "InvalidExtraSourceImages"
    TooManyExtraSourceImages = "TooManyExtraSourceImages"
    MissingFullSamplerOrder = "MissingFullSamplerOrder"
    TooManyStopSequences = "TooManyStopSequences"
    ExcessiveStopSequence = "ExcessiveStopSequence"
    TokenOverflow = "TokenOverflow"
    MoreThanMinExtraSourceImage = "MoreThanMinExtraSourceImage"


class RequestError(BaseModel):
    message: str | None = Field(None, description="The error message for this status code.")
    rc: Rc = Field(
        ...,
        description=(
            "The return code for this error. See:"
            " https://github.com/Haidra-Org/AI-Horde/blob/main/README_return_codes.md"
        ),
        examples=[
            "ExampleHordeError",
        ],
    )


class RequestInterrogationResponse(BaseModel):
    id_: str | None = Field(
        None,
        description="The UUID of the request. Use this to retrieve the request status in the future.",
    )
    message: str | None = Field(None, description="Any extra information from the horde about this request.")


class Code(Enum):
    NoAvailableWorker = "NoAvailableWorker"
    ClipSkipMismatch = "ClipSkipMismatch"
    StepsTooFew = "StepsTooFew"
    StepsTooMany = "StepsTooMany"
    CfgScaleMismatch = "CfgScaleMismatch"
    CfgScaleTooSmall = "CfgScaleTooSmall"
    CfgScaleTooLarge = "CfgScaleTooLarge"
    SamplerMismatch = "SamplerMismatch"
    SchedulerMismatch = "SchedulerMismatch"


class RequestSingleWarning(BaseModel):
    code: Code | None = Field(
        None,
        description="A unique identifier for this warning.",
        examples=["NoAvailableWorker"],
    )
    message: str | None = Field(
        None,
        description="Something that you should be aware about this request, in plain text.",
        min_length=1,
    )


class RequestStatusCheck(BaseModel):
    done: bool | None = Field(None, description="True when all jobs in this request are done. Else False.")
    faulted: bool | None = Field(
        False,
        description="True when this request caused an internal server error and could not be completed.",
    )
    finished: int | None = Field(None, description="The amount of finished jobs in this request.")
    is_possible: bool | None = Field(
        True,
        description=(
            "If False, this request will not be able to be completed with the pool of workers currently available."
        ),
    )
    kudos: float | None = Field(None, description="The amount of total Kudos this request has consumed until now.")
    processing: int | None = Field(None, description="The amount of still processing jobs in this request.")
    queue_position: int | None = Field(
        None,
        description="The position in the requests queue. This position is determined by relative Kudos amounts.",
    )
    restarted: int | None = Field(
        None,
        description=(
            "The amount of jobs that timed out and had to be restarted or were reported as failed by a worker."
        ),
    )
    wait_time: int | None = Field(
        None,
        description="The expected amount to wait (in seconds) to generate all jobs in this request.",
    )
    waiting: int | None = Field(None, description="The amount of jobs waiting to be picked up by a worker.")


class RequestStatusStable(RequestStatusCheck):
    generations: list[GenerationStable] | None = None
    shared: bool | None = Field(None, description="If True, These images have been shared with LAION.")


class RequestValidationError(RequestError):
    errors: dict[str, str] | None = None


class SharedKeyDetails(BaseModel):
    expiry: datetime | None = Field(None, description="The date at which this API key will expire.")
    id_: str | None = Field(None, description="The SharedKey ID.")
    kudos: int | None = Field(None, description="The Kudos limit assigned to this key.")
    max_image_pixels: int | None = Field(
        None,
        description="The maximum amount of image pixels this key can generate per job. -1 means unlimited.",
    )
    max_image_steps: int | None = Field(
        None,
        description="The maximum amount of image steps this key can use per job. -1 means unlimited.",
    )
    max_text_tokens: int | None = Field(
        None,
        description="The maximum amount of text tokens this key can generate per job. -1 means unlimited.",
    )
    name: str | None = Field(None, description="The Shared Key Name.")
    username: str | None = Field(
        None,
        description="The owning user's unique Username. It is a combination of their chosen alias plus their ID.",
    )
    utilized: int | None = Field(None, description="How much kudos has been utilized via this shared key until now.")


class SharedKeyInput(BaseModel):
    expiry: int | None = Field(
        -1,
        description="The amount of days after which this key will expire. If -1, this key will not expire.",
        examples=[30],
        ge=-1,
    )
    kudos: int | None = Field(
        5000,
        description=(
            "The Kudos limit assigned to this key. If -1, then anyone with this key can use an unlimited amount of"
            " kudos from this account."
        ),
        ge=-1,
        le=50000000,
    )
    max_image_pixels: int | None = Field(
        -1,
        description="The maximum amount of image pixels this key can generate per job. -1 means unlimited.",
        ge=-1,
        le=4194304,
    )
    max_image_steps: int | None = Field(
        -1,
        description="The maximum amount of image steps this key can use per job. -1 means unlimited.",
        ge=-1,
        le=500,
    )
    max_text_tokens: int | None = Field(
        -1,
        description="The maximum amount of text tokens this key can generate per job. -1 means unlimited.",
        ge=-1,
        le=500,
    )
    name: str | None = Field(
        None,
        description="A descriptive name for this key.",
        examples=["Mutual Aid"],
        max_length=255,
        min_length=3,
    )


class SimpleResponse(BaseModel):
    message: str = Field(..., description="The result of this operation.")


class SinglePeriodImgModelStats(BaseModel):
    field_: dict[str, int] | None = Field(None, alias="*")


class SinglePeriodImgStat(BaseModel):
    images: int | None = Field(None, description="The amount of images generated during this period.")
    ps: int | None = Field(None, description="The amount of pixelsteps generated during this period.")


class SinglePeriodTxtModelStats(BaseModel):
    field_: dict[str, int] | None = Field(None, alias="*")


class StatsImgTotals(BaseModel):
    day: SinglePeriodImgStat | None = None
    hour: SinglePeriodImgStat | None = None
    minute: SinglePeriodImgStat | None = None
    month: SinglePeriodImgStat | None = None
    total: SinglePeriodImgStat | None = None


class StatsTxtTotals(BaseModel):
    day: SinglePeriodImgStat | None = None
    hour: SinglePeriodImgStat | None = None
    minute: SinglePeriodImgStat | None = None
    month: SinglePeriodImgStat | None = None
    total: SinglePeriodImgStat | None = None


class State1(Enum):
    ok = "ok"
    censored = "censored"
    faulted = "faulted"
    csam = "csam"


class SubmitInput(BaseModel):
    generation: str | None = Field(
        None,
        description="R2 result was uploaded to R2, else the string of the result.",
        examples=["R2"],
    )
    id_: str = Field(
        ...,
        description="The UUID of this generation.",
        examples=["00000000-0000-0000-0000-000000000000"],
    )
    state: State1 | None = Field(
        "ok",
        description="The state of this generation.",
        examples=["ok"],
        title="Generation State",
    )


class SubmitInputKobold(SubmitInput):
    gen_metadata: list[GenerationMetadataKobold] | None = None


class SubmitInputStable(SubmitInput):
    censored: bool | None = Field(
        False,
        description="OBSOLETE (start using meta): If True, this resulting image has been censored.",
    )
    gen_metadata: list[GenerationMetadataStable] | None = None
    seed: int = Field(..., description="The seed for this generation.")


class TeamDetailsLite(BaseModel):
    id_: str | None = Field(None, description="The UUID of this team.")
    name: str | None = Field(None, description="The Name given to this team.")


class TxtModelStats(BaseModel):
    day: SinglePeriodTxtModelStats | None = None
    month: SinglePeriodTxtModelStats | None = None
    total: SinglePeriodTxtModelStats | None = None


class UsageDetails(BaseModel):
    megapixelsteps: float | None = Field(None, description="How many megapixelsteps this user has requested.")
    requests: int | None = Field(None, description="How many images this user has requested.")


class UserAmountRecords(BaseModel):
    image: int | None = Field(0, description="How many images this user has generated or requested.")
    interrogation: int | None = Field(0, description="How many texts this user has generated or requested.")
    text: int | None = Field(0, description="How many texts this user has generated or requested.")


class UserKudosDetails(BaseModel):
    accumulated: float | None = Field(0, description="The ammount of Kudos accumulated or used for generating images.")
    admin: float | None = Field(0, description="The amount of Kudos this user has been given by the AI Horde admins.")
    awarded: float | None = Field(
        0,
        description="The amount of Kudos this user has been awarded from things like rating images.",
    )
    donated: float | None = Field(
        0,
        description="The amount of Kudos this user has donated to public goods accounts like education.",
    )
    gifted: float | None = Field(0, description="The amount of Kudos this user has given to other users.")
    received: float | None = Field(0, description="The amount of Kudos this user has been given by other users.")
    recurring: float | None = Field(
        0,
        description="The amount of Kudos this user has received from recurring rewards.",
    )


class UserThingRecords(BaseModel):
    megapixelsteps: float | None = Field(
        0,
        description="How many megapixelsteps this user has generated or requested.",
    )
    tokens: int | None = Field(0, description="How many token this user has generated or requested.")


class Type3(Enum):
    image = "image"
    text = "text"
    interrogation = "interrogation"


class WorkerDetailsLite(BaseModel):
    id_: str | None = Field(None, description="The UUID of this worker.")
    name: str | None = Field(None, description="The Name given to this worker.")
    online: bool | None = Field(None, description="True if the worker has checked-in the past 5 minutes.")
    type_: Type3 | None = Field(None, description="The Type of worker this is.", examples=["image"])


class WorkerKudosDetails(BaseModel):
    generated: float | None = Field(None, description="How much Kudos this worker has received for generating images.")
    uptime: int | None = Field(None, description="How much Kudos this worker has received for staying online longer.")


class ActiveModel(ActiveModelLite):
    eta: int | None = Field(None, description="Estimated time in seconds for this model's queue to be cleared.")
    jobs: float | None = Field(None, description="The job count waiting to be generated by this model.")
    performance: float | None = Field(None, description="The average speed of generation for this model.")
    queued: float | None = Field(None, description="The amount waiting to be generated by this model.")
    type_: Type | None = Field(None, description="The model type (text or image).", examples=["image"])


class GenerationKobold(Generation):
    gen_metadata: list[GenerationMetadataKobold] | None = None
    seed: int | None = Field(0, description="The seed which generated this text.", title="Generation Seed")
    text: str | None = Field(None, description="The generated text.", min_length=0, title="Generated Text")


class GenerationPayload(BaseModel):
    id_: str | None = Field(None, description="The UUID for this generation.")
    payload: ModelPayload | None = None
    skipped: NoValidRequestFound | None = None


class ImgModelStats(BaseModel):
    day: SinglePeriodImgModelStats | None = None
    month: SinglePeriodImgModelStats | None = None
    total: SinglePeriodImgModelStats | None = None


class InterrogationPopFormPayload(BaseModel):
    form: Form | None = Field(None, description="The name of this interrogation form", examples=["caption"])
    id_: str | None = Field(
        None,
        description="The UUID of the interrogation form. Use this to post the results in the future.",
    )
    payload: ModelInterrogationFormPayloadStable | None = None
    r2_upload: str | None = Field(None, description="The URL in which the post-processed image can be uploaded.")
    source_image: str | None = Field(None, description="The URL From which the source image can be downloaded.")


class InterrogationPopPayload(BaseModel):
    forms: list[InterrogationPopFormPayload] | None = None
    skipped: NoValidInterrogationsFound | None = None


class ModelGenerationInputKobold(ModelPayloadRootKobold):
    pass


class ModelPayloadRootStable(BaseModel):
    cfg_scale: float | None = Field(7.5, ge=0.0, le=100.0)
    clip_skip: int | None = Field(
        None,
        description="The number of CLIP language processor layers to skip.",
        examples=[1],
        ge=1,
        le=12,
    )
    control_type_: ControlType | None = Field(None, examples=["canny"])
    denoising_strength: float | None = Field(None, examples=[0.75], ge=0.01, le=1.0)
    facefixer_strength: float | None = Field(None, examples=[0.75], ge=0.0, le=1.0)
    height: int | None = Field(
        512,
        description="The height of the image to generate.",
        ge=64,
        le=3072,
        multiple_of=64.0,
    )
    hires_fix: bool | None = Field(
        False,
        description="Set to True to process the image at base resolution before upscaling and re-processing.",
    )
    image_is_control: bool | None = Field(
        False,
        description="Set to True if the image submitted is a pre-generated control map for ControlNet use.",
    )
    karras: bool | None = Field(False, description="Set to True to enable karras noise scheduling tweaks.")
    loras: list[ModelPayloadLorasStable] | None = None
    post_processing: list[PostProcessingEnum] | None = None
    return_control_map: bool | None = Field(
        False,
        description="Set to True if you want the ControlNet map returned instead of a generated image.",
    )
    sampler_name: SamplerName | None = Field("k_euler_a", examples=["k_euler"])
    seed: str | None = Field(
        None,
        description="The seed to use to generate this request. You can pass text as well as numbers.",
        examples=[
            "The little seed that could",
        ],
    )
    seed_variation: int | None = Field(
        None,
        description="If passed with multiple n, the provided seed will be incremented every time by this value.",
        examples=[1],
        ge=1,
        le=1000,
    )
    special: ModelSpecialPayloadStable | None = None
    tiling: bool | None = Field(False, description="Set to True to create images that stitch together seamlessly.")
    tis: list[ModelPayloadTextualInversionsStable] | None = None
    width: int | None = Field(512, description="The width of the image to generate.", ge=64, le=3072, multiple_of=64.0)


class ModelPayloadStable(ModelPayloadRootStable):
    ddim_steps: int | None = 30
    n_iter: int | None = Field(1, description="The amount of images to generate.")
    prompt: str | None = Field(
        None,
        description="The prompt which will be sent to Stable Diffusion to generate an image.",
    )
    use_nsfw_censor: bool | None = Field(
        None,
        description="When true will apply NSFW censoring model on the generation.",
    )


class RequestAsync(BaseModel):
    id_: str | None = Field(
        None,
        description="The UUID of the request. Use this to retrieve the request status in the future.",
    )
    kudos: float | None = Field(None, description="The expected kudos consumption for this request.")
    message: str | None = Field(None, description="Any extra information from the horde about this request.")
    warnings: list[RequestSingleWarning] | None = None


class RequestStatusKobold(RequestStatusCheck):
    generations: list[GenerationKobold] | None = None


class TeamDetails(TeamDetailsLite):
    info: str | None = Field(
        None,
        description="Extra information or comments about this team provided by its owner.",
        examples=[
            "Anarchy is emergent order.",
        ],
    )
    creator: str | None = Field(None, description="The alias of the user which created this team.", examples=["db0#1"])
    kudos: float | None = Field(
        None,
        description="How many Kudos the workers in this team have been rewarded while part of this team.",
    )
    models: list[ActiveModelLite] | None = None
    requests_fulfilled: int | None = Field(None, description="How many images this team's workers have generated.")
    uptime: int | None = Field(
        None,
        description="The total amount of time workers have stayed online while on this team.",
    )
    worker_count: int | None = Field(
        None,
        description="How many workers have been dedicated to this team.",
        examples=[10],
    )
    workers: list[WorkerDetailsLite] | None = None


class UserRecords(BaseModel):
    contribution: UserThingRecords | None = None
    fulfillment: UserAmountRecords | None = None
    request: UserAmountRecords | None = None
    usage: UserThingRecords | None = None


class WorkerDetails(WorkerDetailsLite):
    info: str | None = Field(
        None,
        description="Extra information or comments about this worker provided by its owner.",
        examples=[
            "https://dbzer0.com",
        ],
    )
    bridge_agent: str = Field(
        ...,
        description="The bridge agent name, version and website.",
        examples=["AI Horde Worker reGen:4.1.0:https://github.com/Haidra-Org/horde-worker-reGen"],
        max_length=1000,
    )
    contact: str | None = Field(
        None,
        description=(
            "(Privileged) Contact details for the horde admins to reach the owner of this worker in emergencies."
        ),
        examples=["email@example.com"],
        max_length=500,
        min_length=5,
    )
    flagged: bool | None = Field(
        None,
        description=(
            "The worker's owner has been flagged for suspicious activity. This worker will not be given any jobs to"
            " process."
        ),
    )
    forms: list[str] | None = None
    img2img: bool | None = Field(None, description="If True, this worker supports and allows img2img requests.")
    ipaddr: str | None = Field(
        None,
        description="Privileged. The last known IP this worker has connected from.",
        examples=["username#1"],
    )
    kudos_details: WorkerKudosDetails | None = None
    kudos_rewards: float | None = Field(None, description="How many Kudos this worker has been rewarded in total.")
    lora: bool | None = Field(None, description="If True, this worker supports and allows lora requests.")
    maintenance_mode: bool | None = Field(
        None,
        description="When True, this worker will not pick up any new requests.",
        examples=[False],
    )
    max_context_length: int | None = Field(None, description="The maximum tokens this worker can read.", examples=[80])
    max_length: int | None = Field(None, description="The maximum tokens this worker can generate.", examples=[80])
    max_pixels: int | None = Field(
        None,
        description="The maximum pixels in resolution this worker can generate.",
        examples=[262144],
    )
    megapixelsteps_generated: float | None = Field(
        None,
        description="How many megapixelsteps this worker has generated until now.",
    )
    models: list[str] | None = None
    nsfw: bool | None = Field(False, description="Whether this worker can generate NSFW requests or not.")
    owner: str | None = Field(
        None,
        description="Privileged or public if the owner has allowed it. The alias of the owner of this worker.",
        examples=[
            "username#1",
        ],
    )
    painting: bool | None = Field(None, description="If True, this worker supports and allows inpainting requests.")
    paused: bool | None = Field(
        None,
        description="(Privileged) When True, this worker not be given any new requests.",
        examples=[False],
    )
    performance: str | None = Field(None, description="The average performance of this worker in human readable form.")
    post_processing: bool | None = Field(
        None,
        alias="post-processing",
        description="If True, this worker supports and allows post-processing requests.",
    )
    requests_fulfilled: int | None = Field(None, description="How many images this worker has generated.")
    suspicious: int | None = Field(
        None,
        description="(Privileged) How much suspicion this worker has accumulated.",
        examples=[0],
    )
    team: TeamDetailsLite | None = None
    threads: int | None = Field(None, description="How many threads this worker is running.")
    tokens_generated: float | None = Field(None, description="How many tokens this worker has generated until now.")
    trusted: bool | None = Field(None, description="The worker is trusted to return valid generations.")
    uncompleted_jobs: int | None = Field(
        None,
        description="How many jobs this worker has left uncompleted after it started them.",
        examples=[0],
    )
    uptime: int | None = Field(
        None,
        description="The amount of seconds this worker has been online for this AI Horde.",
    )


class GenerationInputKobold(BaseModel):
    allow_downgrade: bool | None = Field(
        False,
        description=(
            "When true and the request requires upfront kudos and the account does not have enough The request will be"
            " downgraded in max context and max tokens so that it does not need upfront kudos."
        ),
    )
    disable_batching: bool | None = Field(
        False,
        description=(
            "When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is"
            " restricted to Trusted users and Patreons."
        ),
    )
    dry_run: bool | None = Field(
        False,
        description="When true, the endpoint will simply return the cost of the request in kudos and exit.",
    )
    extra_source_images: list[ExtraSourceImage] | None = None
    models: list[str] | None = None
    params: ModelGenerationInputKobold | None = None
    prompt: str | None = Field(None, description="The prompt which will be sent to KoboldAI to generate text.")
    proxied_account: str | None = Field(
        None,
        description=(
            "If using a service account as a proxy, provide this value to identify the actual account from which this"
            " request is coming from."
        ),
    )
    slow_workers: bool | None = Field(
        True,
        description=(
            "When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost."
        ),
    )
    softprompt: str | None = Field(
        None,
        description="Specify which softpompt needs to be used to service this request.",
        min_length=1,
    )
    trusted_workers: bool | None = Field(
        False,
        description=(
            "When true, only trusted workers will serve this request. When False, Evaluating workers will also be used"
            " which can increase speed but adds more risk!"
        ),
    )
    webhook: str | None = Field(
        None,
        description=(
            "Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will"
            " include the details of the job as well as the request ID."
        ),
    )
    worker_blacklist: bool | None = Field(
        False,
        description="If true, the worker list will be treated as a blacklist instead of a whitelist.",
    )
    workers: list[str] | None = None


class GenerationPayloadStable(BaseModel):
    extra_source_images: list[ExtraSourceImage] | None = None
    id_: str | None = Field(None, description="The UUID for this image generation.")
    ids: list[str] | None = None
    model: str | None = Field(None, description="Which of the available models to use for this request.")
    payload: ModelPayloadStable | None = None
    r2_upload: str | None = Field(None, description="The r2 upload link to use to upload this image.")
    r2_uploads: list[str] | None = None
    skipped: NoValidRequestFoundStable | None = None
    source_image: str | None = Field(None, description="The Base64-encoded webp to use for img2img.")
    source_mask: str | None = Field(
        None,
        description=(
            "If img_processing is set to 'inpainting' or 'outpainting', this parameter can be optionally provided as"
            " the mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be"
            " embedded as alpha channel."
        ),
    )
    source_processing: SourceProcessing | None = Field(
        "img2img",
        description="If source_image is provided, specifies how to process it.",
        examples=["img2img"],
    )


class ModelGenerationInputStable(ModelPayloadRootStable):
    n: int | None = Field(1, description="The amount of images to generate.", ge=1, le=20)
    steps: int | None = Field(30, ge=1, le=500)


class UserDetails(BaseModel):
    account_age: int | None = Field(
        None,
        description="How many seconds since this account was created.",
        examples=[60],
    )
    admin_comment: str | None = Field(
        None,
        description="(Privileged) Information about this users by the admins",
        examples=["User is sus"],
    )
    concurrency: int | None = Field(None, description="How many concurrent generations this user may request.")
    contact: str | None = Field(
        None,
        description="(Privileged) Contact details for the horde admins to reach the user in case of emergency.",
        examples=[
            "email@example.com",
        ],
    )
    contributions: ContributionsDetails | None = None
    education: bool | None = Field(
        None,
        description="This is an education account used schools and universities.",
        examples=[False],
    )
    evaluating_kudos: float | None = Field(
        None,
        description=(
            "(Privileged) The amount of Evaluating Kudos this untrusted user has from generations and uptime. When"
            " this number reaches a prespecified threshold, they automatically become trusted."
        ),
    )
    flagged: bool | None = Field(
        None,
        description="(Privileged) This user has been flagged for suspicious activity.",
        examples=[False],
    )
    id_: int | None = Field(None, description="The user unique ID. It is always an integer.")
    kudos: float | None = Field(
        None,
        description=(
            "The amount of Kudos this user has. The amount of Kudos determines the priority when requesting image"
            " generations."
        ),
    )
    kudos_details: UserKudosDetails | None = None
    moderator: bool | None = Field(None, description="This user is a AI Horde moderator.", examples=[False])
    monthly_kudos: MonthlyKudos | None = None
    pseudonymous: bool | None = Field(
        None,
        description="If true, this user has not registered using an oauth service.",
        examples=[False],
    )
    records: UserRecords | None = None
    service: bool | None = Field(
        None,
        description="This is a service account used by a horde proxy.",
        examples=[False],
    )
    sharedkey_ids: list[str] | None = None
    special: bool | None = Field(
        None,
        description="(Privileged) This user has been given the Special role.",
        examples=[False],
    )
    suspicious: int | None = Field(
        None,
        description="(Privileged) How much suspicion this user has accumulated.",
        examples=[0],
    )
    trusted: bool | None = Field(None, description="This user is a trusted member of the AI Horde.", examples=[False])
    usage: UsageDetails | None = None
    username: str | None = Field(
        None,
        description="The user's unique Username. It is a combination of their chosen alias plus their ID.",
    )
    vpn: bool | None = Field(None, description="(Privileged) This user has been given the VPN role.", examples=[False])
    worker_count: int | None = Field(None, description="How many workers this user has created (active or inactive).")
    worker_ids: list[str] | None = None
    worker_invited: int | None = Field(
        None,
        description=(
            "Whether this user has been invited to join a worker to the AI Horde and how many of them. When 0, this"
            " user cannot add (new) workers to the horde."
        ),
    )


class GenerationInputStable(BaseModel):
    allow_downgrade: bool | None = Field(
        False,
        description=(
            "When true and the request requires upfront kudos and the account does not have enough The request will be"
            " downgraded in steps and resolution so that it does not need upfront kudos."
        ),
    )
    censor_nsfw: bool | None = Field(
        False,
        description=(
            "If the request is SFW, and the worker accidentally generates NSFW, it will send back a censored image."
        ),
    )
    disable_batching: bool | None = Field(
        False,
        description=(
            "When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is"
            " restricted to Trusted users and Patreons."
        ),
    )
    dry_run: bool | None = Field(
        False,
        description="When true, the endpoint will simply return the cost of the request in kudos and exit.",
    )
    extra_source_images: list[ExtraSourceImage] | None = None
    models: list[str] | None = None
    nsfw: bool | None = Field(
        False,
        description="Set to true if this request is NSFW. This will skip workers which censor images.",
    )
    params: ModelGenerationInputStable | None = None
    prompt: str = Field(
        ...,
        description="The prompt which will be sent to Stable Diffusion to generate an image.",
        min_length=1,
    )
    proxied_account: str | None = Field(
        None,
        description=(
            "If using a service account as a proxy, provide this value to identify the actual account from which this"
            " request is coming from."
        ),
    )
    r2: bool | None = Field(True, description="If True, the image will be sent via cloudflare r2 download link.")
    replacement_filter: bool | None = Field(
        True,
        description="If enabled, suspicious prompts are sanitized through a string replacement filter instead.",
    )
    shared: bool | None = Field(
        False,
        description=(
            "If True, The image will be shared with LAION for improving their dataset. This will also reduce your"
            " kudos consumption by 2. For anonymous users, this is always True."
        ),
    )
    slow_workers: bool | None = Field(
        True,
        description=(
            "When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost."
        ),
    )
    source_image: str | None = Field(None, description="The Base64-encoded webp to use for img2img.")
    source_mask: str | None = Field(
        None,
        description=(
            "If source_processing is set to 'inpainting' or 'outpainting', this parameter can be optionally provided"
            " as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the"
            " inpainting/outpainting mask has to be embedded as alpha channel."
        ),
    )
    source_processing: SourceProcessing | None = Field(
        "img2img",
        description="If source_image is provided, specifies how to process it.",
        examples=["img2img"],
    )
    trusted_workers: bool | None = Field(
        False,
        description=(
            "When true, only trusted workers will serve this request. When False, Evaluating workers will also be used"
            " which can increase speed but adds more risk!"
        ),
    )
    webhook: str | None = Field(
        None,
        description=(
            "Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will"
            " include the details of the job as well as the request ID."
        ),
        examples=["https://haidra.net/00000000-0000-0000-0000-000000000000"],
        max_length=1024,
        min_length=10,
    )
    worker_blacklist: bool | None = Field(
        False,
        description="If true, the worker list will be treated as a blacklist instead of a whitelist.",
    )
    workers: list[str] | None = None
