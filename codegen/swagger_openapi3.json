{
  "openapi": "3.0.0",
  "info": {
    "description": "The API documentation for the AI Horde",
    "title": "AI Horde",
    "version": "2.0"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "paths": {
    "/v2/filters": {
      "get": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "The filter type.",
            "in": "query",
            "name": "filter_type",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Only return filter containing this word.",
            "in": "query",
            "name": "contains",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FilterDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Filters List"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_filters",
        "summary": "Moderator Only: A List all filters, or filtered by the query"
      },
      "post": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterPromptSuspicion"
                }
              }
            },
            "description": "Returns the suspicion of the provided prompt. A suspicion of 2 or more means it would be blocked."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "post_filters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter_type": {
                    "type": "integer"
                  },
                  "prompt": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Moderator Only: Check The suspicion of the provided prompt"
      },
      "put": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterDetails"
                }
              }
            },
            "description": "New Filter details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "put_filters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutNewFilter"
              }
            }
          },
          "required": true
        },
        "summary": "Moderator Only: Add a new regex filter"
      }
    },
    "/v2/filters/regex": {
      "get": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "The filter type.",
            "in": "query",
            "name": "filter_type",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FilterRegex"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Filters Regex"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_filter_regex",
        "summary": "Moderator Only: A List all filters, or filtered by the query"
      }
    },
    "/v2/filters/{filter_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "filter_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            },
            "description": "Filter Deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "delete_filter_single",
        "summary": "Moderator Only: Delete a regex filter"
      },
      "get": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FilterDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Filters List"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_filter_single",
        "summary": "Moderator Only: Display a single filter"
      },
      "patch": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterDetails"
                }
              }
            },
            "description": "Patched Filter details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "patch_filter_single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchExistingFilter"
              }
            }
          },
          "required": true
        },
        "summary": "Moderator Only: Modify an existing regex filter"
      }
    },
    "/v2/find_user": {
      "get": {
        "parameters": [
          {
            "description": "User API key we're looking for.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            },
            "description": "Worker Details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "User Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This can be used to verify a user exists",
        "operationId": "get_find_user",
        "summary": "Lookup user details based on their API key"
      }
    },
    "/v2/generate/async": {
      "post": {
        "parameters": [
          {
            "description": "The API Key corresponding to a registered user.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestAsync"
                }
              }
            },
            "description": "Generation Queued"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Too Many Prompts"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Maintenance Mode"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint will immediately return with the UUID of the request for generation.\nThis endpoint will always be accepted, even if there are no workers available currently to fulfill this request.\nPerhaps some will appear in the next 10 minutes.\nAsynchronous requests live for 10 minutes before being considered stale and being deleted.",
        "operationId": "post_image_async_generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerationInputStable"
              }
            }
          },
          "required": true
        },
        "summary": "Initiate an Asynchronous request to generate images"
      }
    },
    "/v2/generate/check/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatusCheck"
                }
              }
            },
            "description": "Async Request Status Check"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Use this request to check the status of a currently running asynchronous request without consuming bandwidth.",
        "operationId": "get_image_async_check",
        "summary": "Retrieve the status of an Asynchronous generation request without images"
      }
    },
    "/v2/generate/pop": {
      "post": {
        "parameters": [
          {
            "description": "The API Key corresponding to a registered user.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationPayloadStable"
                }
              }
            },
            "description": "Generation Popped"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint is used by registered workers only",
        "operationId": "post_image_job_pop",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PopInputStable"
              }
            }
          },
          "required": true
        },
        "summary": "Check if there are generation requests queued for fulfillment"
      }
    },
    "/v2/generate/rate/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationSubmitted"
                }
              }
            },
            "description": "Aesthetics Submitted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Aesthetics Already Submitted"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Generation Request Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "AI\nThe request has to have been sent as shared: true.\nYou can select the best image in the set, and/or provide a rating for each or some images in the set.\nIf you select best-of image, you will gain 4 kudos. Each rating is 5 kudos. Best-of will be ignored when ratings conflict with it.\nYou can never gain more kudos than you spent for this generation. Your reward at max will be your kudos consumption - 1.",
        "operationId": "post_aesthetics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AestheticsPayload"
              }
            }
          },
          "required": true
        },
        "summary": "Submit aesthetic ratings for generated images to be used by LAION and Stability"
      }
    },
    "/v2/generate/status/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatusStable"
                }
              }
            },
            "description": "Async Request Full Status"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This request will include all already generated images in base64 encoded .webp files.",
        "operationId": "delete_image_async_status",
        "summary": "Cancel an unfinished request"
      },
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatusStable"
                }
              }
            },
            "description": "Async Request Full Status"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This request will include all already generated images in download URL or base64 encoded .webp files.\nAs such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first\nThis endpoint is limited to 10 request per minute",
        "operationId": "get_image_async_status",
        "summary": "Retrieve the full status of an Asynchronous generation request"
      }
    },
    "/v2/generate/submit": {
      "post": {
        "parameters": [
          {
            "description": "The worker's owner API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationSubmitted"
                }
              }
            },
            "description": "Generation Submitted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Generation Already Submitted"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint is used by registered workers only",
        "operationId": "post_image_job_submit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitInputStable"
              }
            }
          },
          "required": true
        },
        "summary": "Submit a generated image"
      }
    },
    "/v2/generate/text/async": {
      "post": {
        "parameters": [
          {
            "description": "The API Key corresponding to a registered user.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestAsync"
                }
              }
            },
            "description": "Generation Queued"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Too Many Prompts"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Maintenance Mode"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint will immediately return with the UUID of the request for generation.\nThis endpoint will always be accepted, even if there are no workers available currently to fulfill this request.\nPerhaps some will appear in the next 20 minutes.\nAsynchronous requests live for 20 minutes before being considered stale and being deleted.",
        "operationId": "post_text_async_generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerationInputKobold"
              }
            }
          },
          "required": true
        },
        "summary": "Initiate an Asynchronous request to generate text"
      }
    },
    "/v2/generate/text/pop": {
      "post": {
        "parameters": [
          {
            "description": "The API Key corresponding to a registered user.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationPayload"
                }
              }
            },
            "description": "Generation Popped"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint is used by registered workers only",
        "operationId": "post_text_job_pop",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PopInputKobold"
              }
            }
          },
          "required": true
        },
        "summary": "Check if there are generation requests queued for fulfillment"
      }
    },
    "/v2/generate/text/status/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatusKobold"
                }
              }
            },
            "description": "Async Request Full Status"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This request will include all already generated texts.",
        "operationId": "delete_text_async_status",
        "summary": "Cancel an unfinished request"
      },
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatusKobold"
                }
              }
            },
            "description": "Async Request Full Status"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This request will include all already generated texts.",
        "operationId": "get_text_async_status",
        "summary": "Retrieve the full status of an Asynchronous generation request"
      }
    },
    "/v2/generate/text/submit": {
      "post": {
        "parameters": [
          {
            "description": "The worker's owner API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationSubmitted"
                }
              }
            },
            "description": "Generation Submitted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Generation Already Submitted"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint is used by registered workers only",
        "operationId": "post_text_job_submit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitInputKobold"
              }
            }
          },
          "required": true
        },
        "summary": "Submit generated text"
      }
    },
    "/v2/interrogate/async": {
      "post": {
        "parameters": [
          {
            "description": "A User API key",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestInterrogationResponse"
                }
              }
            },
            "description": "Interrogation Queued"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Too Many Prompts"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Maintenance Mode"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint will immediately return with the UUID of the request for interrogation.\nThis endpoint will always be accepted, even if there are no workers available currently to fulfill this request.\nPerhaps some will appear in the next 20 minutes.\nAsynchronous requests live for 20 minutes before being considered stale and being deleted.",
        "operationId": "post_interrogate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelInterrogationInputStable"
              }
            }
          },
          "required": true
        },
        "summary": "Initiate an Asynchronous request to interrogate an image"
      }
    },
    "/v2/interrogate/pop": {
      "post": {
        "parameters": [
          {
            "description": "The API Key corresponding to a registered user",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterrogationPopPayload"
                }
              }
            },
            "description": "Interrogation Popped"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint is used by registered workers only",
        "operationId": "post_interrogate_pop",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterrogationPopInput"
              }
            }
          },
          "required": true
        },
        "summary": "Check if there are interrogation requests queued for fulfillment"
      }
    },
    "/v2/interrogate/status/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterrogationStatus"
                }
              }
            },
            "description": "Interrogation Request Status"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This request will return all already interrogated image results.",
        "operationId": "delete_interrogation_status",
        "summary": "Cancel an unfinished interrogation request"
      },
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterrogationStatus"
                }
              }
            },
            "description": "Interrogation Request Status"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This request will include all already generated images.\nAs such, you are requested to not retrieve this endpoint often. Instead use the /check/ endpoint first",
        "operationId": "get_interrogation_status",
        "summary": "Retrieve the full status of an interrogation request"
      }
    },
    "/v2/interrogate/submit": {
      "post": {
        "parameters": [
          {
            "description": "The worker's owner API key",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationSubmitted"
                }
              }
            },
            "description": "Interrogation Submitted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Generation Already Submitted"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Request Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This endpoint is used by registered workers only",
        "operationId": "post_interrogate_submit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "result": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Submit the results of an interrogated image"
      }
    },
    "/v2/kudos/award": {
      "post": {
        "parameters": [
          {
            "description": "The sending user's API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KudosAwarded"
                }
              }
            },
            "description": "Kudos Awarded"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This API can only be used through privileged access.",
        "operationId": "post_award_kudos",
        "requestBody": {
          "$ref": "#/components/requestBodies/post_award_kudosPayload"
        },
        "summary": "Awards Kudos to registed user"
      }
    },
    "/v2/kudos/transfer": {
      "post": {
        "parameters": [
          {
            "description": "The sending user's API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KudosTransferred"
                }
              }
            },
            "description": "Kudos Transferred"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "post_transfer_kudos",
        "requestBody": {
          "$ref": "#/components/requestBodies/post_award_kudosPayload"
        },
        "summary": "Transfer Kudos to another registed user"
      }
    },
    "/v2/operations/block_worker_ipaddr/{worker_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "worker_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            },
            "description": "Operation Completed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Only usable by horde moderators",
        "operationId": "delete_operations_block_worker_ip",
        "summary": "Remove a worker's IP block"
      },
      "put": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            },
            "description": "Operation Completed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Only usable by horde moderators",
        "operationId": "put_operations_block_worker_ip",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddWorkerTimeout"
              }
            }
          },
          "required": true
        },
        "summary": "Block worker's from a specific IP for 24 hours"
      }
    },
    "/v2/operations/ipaddr": {
      "delete": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            },
            "description": "Operation Completed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Only usable by horde moderators",
        "operationId": "delete_operations_ip",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTimeoutIPInput"
              }
            }
          },
          "required": true
        },
        "summary": "Remove an IP from timeout"
      },
      "get": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IPTimeout"
                  },
                  "type": "array"
                }
              }
            },
            "description": "An IP timeout entry"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_operations_ip",
        "summary": "Return all existing IP Block timeouts"
      },
      "post": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            },
            "description": "Operation Completed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Only usable by horde moderators",
        "operationId": "post_operations_ip",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTimeoutIPInput"
              }
            }
          },
          "required": true
        },
        "summary": "Add an IP or CIDR to timeout"
      }
    },
    "/v2/operations/ipaddr/{ipaddr}": {
      "parameters": [
        {
          "in": "path",
          "name": "ipaddr",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "A mod API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IPTimeout"
                  },
                  "type": "array"
                }
              }
            },
            "description": "IP timeout entries that match IP"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_operations_ip_single",
        "summary": "Check if an IP or CIDR is in timeout"
      }
    },
    "/v2/sharedkeys": {
      "put": {
        "parameters": [
          {
            "description": "User API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedKeyDetails"
                }
              }
            },
            "description": "SharedKey Details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Shared Key Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "put_shared_key",
        "requestBody": {
          "$ref": "#/components/requestBodies/SharedKeyInput"
        },
        "summary": "Create a new SharedKey for this user"
      }
    },
    "/v2/sharedkeys/{sharedkey_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "sharedkey_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "User API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleResponse"
                }
              }
            },
            "description": "Shared Key Deleted"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Shared Key Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "delete_shared_key_single",
        "summary": "Delete an existing SharedKey for this user"
      },
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedKeyDetails"
                }
              }
            },
            "description": "Shared Key Details"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Shared Key Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_shared_key_single",
        "summary": "Get details about an existing Shared Key"
      },
      "patch": {
        "parameters": [
          {
            "description": "User API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedKeyDetails"
                }
              }
            },
            "description": "Shared Key Details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Shared Key Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "patch_shared_key_single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedKeyInput"
              }
            }
          },
          "required": true
        },
        "summary": "Modify an existing Shared Key"
      }
    },
    "/v2/stats/img/models": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "If 'known', only show stats for known models in the model reference. If 'custom' only show stats for custom models. If 'all' shows stats for all models.",
            "in": "query",
            "name": "model_state",
            "schema": {
              "default": "known",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImgModelStats"
                }
              }
            },
            "description": "AI Horde generated images statistics per model"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_image_horde_stats_models",
        "summary": "Details how many images were generated per model for the past day, month and total"
      }
    },
    "/v2/stats/img/totals": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatsImgTotals"
                }
              }
            },
            "description": "AI Horde generated images statistics"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Also shows the amount of pixelsteps for the same timeframe.",
        "operationId": "get_image_horde_stats_totals",
        "summary": "Details how many images have been generated in the past minux,hour,day,month and total"
      }
    },
    "/v2/stats/text/models": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxtModelStats"
                }
              }
            },
            "description": "AI Horde generated text statistics per model"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_text_horde_stats_models",
        "summary": "Details how many texts were generated per model for the past day, month and total"
      }
    },
    "/v2/stats/text/totals": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatsTxtTotals"
                }
              }
            },
            "description": "AI Horde generated text statistics"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Also shows the amount of pixelsteps for the same timeframe.",
        "operationId": "get_text_horde_stats_totals",
        "summary": "Details how many texts have been generated in the past minux,hour,day,month and total"
      }
    },
    "/v2/status/heartbeat": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_heartbeat",
        "summary": "If this loads, this node is available"
      }
    },
    "/v2/status/models": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "Filter the models by type (image or text).",
            "in": "query",
            "name": "type",
            "schema": {
              "default": "image",
              "type": "string"
            }
          },
          {
            "description": "Filter only models that have at least this amount of threads serving.",
            "in": "query",
            "name": "min_count",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter the models that have at most this amount of threads serving.",
            "in": "query",
            "name": "max_count",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "If 'known', only show stats for known models in the model reference. If 'custom' only show stats for custom models. If 'all' shows stats for all models.",
            "in": "query",
            "name": "model_state",
            "schema": {
              "default": "all",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ActiveModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List All Active Models"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_models",
        "summary": "Returns a list of models active currently in this horde"
      }
    },
    "/v2/status/models/{model_name}": {
      "parameters": [
        {
          "in": "path",
          "name": "model_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveModel"
                }
              }
            },
            "description": "Lists specific model stats"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_model_single",
        "summary": "Returns all the statistics of a specific model in this horde"
      }
    },
    "/v2/status/modes": {
      "get": {
        "parameters": [
          {
            "description": "The Admin or Owner API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HordeModes"
                }
              }
            },
            "description": "AI Horde Maintenance"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Use this endpoint to quicky determine if this horde is in maintenance, invite_only or raid mode.",
        "operationId": "get_horde_modes",
        "summary": "Horde Maintenance Mode Status"
      },
      "put": {
        "parameters": [
          {
            "description": "The Admin API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HordeModes"
                }
              }
            },
            "description": "Maintenance Mode Set"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Endpoint for admins to (un)set the horde into maintenance, invite_only or raid modes.",
        "operationId": "put_horde_modes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "invite_only": {
                    "type": "boolean"
                  },
                  "maintenance": {
                    "type": "boolean"
                  },
                  "raid": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Change Horde Modes"
      }
    },
    "/v2/status/news": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Newspiece"
                  },
                  "type": "array"
                }
              }
            },
            "description": "AI Horde News"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_horde_news",
        "summary": "Read the latest happenings on the horde"
      }
    },
    "/v2/status/performance": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HordePerformance"
                }
              }
            },
            "description": "AI Horde Performance"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_horde_load",
        "summary": "Details about the current performance of this Horde"
      }
    },
    "/v2/teams": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TeamDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Teams List"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_teams",
        "summary": "A List with the details of all teams"
      },
      "post": {
        "parameters": [
          {
            "description": "A User API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyTeam"
                }
              }
            },
            "description": "Create Team"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Only trusted users can create new teams.",
        "operationId": "post_teams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamInput"
              }
            }
          },
          "required": true
        },
        "summary": "Create a new team"
      }
    },
    "/v2/teams/{team_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "team_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "The Moderator or Owner API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedTeam"
                }
              }
            },
            "description": "Delete Team"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Team Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Only the team's creator or a horde moderator can use this endpoint.\nThis action is unrecoverable!",
        "operationId": "delete_team_single",
        "summary": "Delete the team entry"
      },
      "get": {
        "parameters": [
          {
            "description": "The Moderator or Owner API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetails"
                }
              }
            },
            "description": "Team Details"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Team Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_team_single",
        "summary": "Details of a worker Team"
      },
      "patch": {
        "parameters": [
          {
            "description": "The Moderator or Creator API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyTeam"
                }
              }
            },
            "description": "Modify Team"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Team Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "patch_team_single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyTeamInput"
              }
            }
          },
          "required": true
        },
        "summary": "Update a Team's information"
      }
    },
    "/v2/users": {
      "get": {
        "parameters": [
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "Which page of results to return. Each page has 25 users.",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "type": "integer"
            }
          },
          {
            "description": "How to sort the returned list.",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "kudos",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            },
            "description": "Users List"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_users",
        "summary": "A List with the details and statistic of all registered users"
      }
    },
    "/v2/users/{user_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "parameters": [
          {
            "description": "The Admin, Mod or Owner API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            },
            "description": "User Details"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "User Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_user_single",
        "summary": "Details and statistics about a specific user"
      },
      "put": {
        "parameters": [
          {
            "description": "The Admin API .",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyUser"
                }
              }
            },
            "description": "Modify User"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Worker Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "put_user_single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyUserInput"
              }
            }
          },
          "required": true
        },
        "summary": "Endpoint for horde admins to perform operations on users"
      }
    },
    "/v2/workers": {
      "get": {
        "parameters": [
          {
            "description": "A Moderator API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "Filter the workers by type (image, text or interrogation).",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WorkerDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Workers List"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "get_workers",
        "summary": "A List with the details of all registered and active workers"
      }
    },
    "/v2/workers/{worker_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "worker_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "parameters": [
          {
            "description": "The Moderator or Owner API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedWorker"
                }
              }
            },
            "description": "Delete Worker"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Worker Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "This will delete the worker and their statistics. Will not affect the kudos generated by that worker for their owner.\nOnly the worker's owner and an admin can use this endpoint.\nThis action is unrecoverable!",
        "operationId": "delete_worker_single",
        "summary": "Delete the worker entry"
      },
      "get": {
        "parameters": [
          {
            "description": "The Moderator or Owner API key.",
            "in": "header",
            "name": "apikey",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkerDetails"
                }
              }
            },
            "description": "Worker Details"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Worker Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "description": "Can retrieve the details of a worker even if inactive\n(A worker is considered inactive if it has not checked in for 5 minutes)",
        "operationId": "get_worker_single",
        "summary": "Details of a registered worker"
      },
      "put": {
        "parameters": [
          {
            "description": "The Moderator or Owner API key.",
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client name and version.",
            "in": "header",
            "name": "Client-Agent",
            "schema": {
              "default": "unknown:0:unknown",
              "type": "string"
            }
          },
          {
            "description": "An optional fields mask",
            "in": "header",
            "name": "X-Fields",
            "schema": {
              "format": "mask",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyWorker"
                }
              }
            },
            "description": "Modify Worker"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Validation Error"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Invalid API Key"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Access Denied"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            },
            "description": "Worker Not Found"
          }
        },
        "tags": [
          "v2"
        ],
        "operationId": "put_worker_single",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyWorkerInput"
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "components": {
    "responses": {
      "MaskError": {
        "description": "When any error occurs on mask"
      },
      "ParseError": {
        "description": "When a mask can't be parsed"
      }
    },
    "requestBodies": {
      "SharedKeyInput": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SharedKeyInput"
            }
          }
        },
        "required": true
      },
      "post_award_kudosPayload": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "amount": {
                  "type": "integer"
                },
                "username": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "ActiveModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActiveModelLite"
          },
          {
            "properties": {
              "eta": {
                "description": "Estimated time in seconds for this model's queue to be cleared.",
                "type": "integer"
              },
              "jobs": {
                "description": "The job count waiting to be generated by this model.",
                "type": "number"
              },
              "performance": {
                "description": "The average speed of generation for this model.",
                "type": "number"
              },
              "queued": {
                "description": "The amount waiting to be generated by this model.",
                "type": "number"
              },
              "type": {
                "description": "The model type (text or image).",
                "enum": [
                  "image",
                  "text"
                ],
                "example": "image",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "ActiveModelLite": {
        "properties": {
          "count": {
            "description": "How many of workers in this horde are running this model.",
            "type": "integer"
          },
          "name": {
            "description": "The Name of a model available by workers in this horde.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddTimeoutIPInput": {
        "properties": {
          "hours": {
            "description": "For how many hours to put this IP in timeout.",
            "example": 24,
            "maximum": 720,
            "minimum": 1,
            "type": "integer"
          },
          "ipaddr": {
            "description": "The IP address or CIDR to add from timeout.",
            "example": "127.0.0.1",
            "maxLength": 40,
            "minLength": 7,
            "type": "string"
          }
        },
        "required": [
          "hours",
          "ipaddr"
        ],
        "type": "object"
      },
      "AddWorkerTimeout": {
        "properties": {
          "days": {
            "description": "For how many days to put this worker's IP in timeout.",
            "example": 7,
            "maximum": 30,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "days"
        ],
        "type": "object"
      },
      "AestheticRating": {
        "properties": {
          "artifacts": {
            "description": "The artifacts rating for this image.\n0 for flawless generation that perfectly fits to the prompt.\n1 for small, hardly recognizable flaws.\n2 small flaws that can easily be spotted, but don not harm the aesthetic experience.\n3 for flaws that look obviously wrong, but only mildly harm the aesthetic experience.\n4 for flaws that look obviously wrong & significantly harm the aesthetic experience.\n5 for flaws that make the image look like total garbage.",
            "example": 1,
            "maximum": 5,
            "minimum": 0,
            "type": "integer"
          },
          "id": {
            "description": "The UUID of image being rated.",
            "example": "6038971e-f0b0-4fdd-a3bb-148f561f815e",
            "maxLength": 36,
            "minLength": 36,
            "type": "string"
          },
          "rating": {
            "description": "The aesthetic rating 1-10 for this image.",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "rating"
        ],
        "type": "object"
      },
      "AestheticsPayload": {
        "properties": {
          "best": {
            "description": "The UUID of the best image in this generation batch (only used when 2+ images generated). If 2+ aesthetic ratings are also provided, then they take precedence if they're not tied.",
            "example": "6038971e-f0b0-4fdd-a3bb-148f561f815e",
            "maxLength": 36,
            "minLength": 36,
            "type": "string"
          },
          "ratings": {
            "items": {
              "$ref": "#/components/schemas/AestheticRating"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ContributionsDetails": {
        "properties": {
          "fulfillments": {
            "description": "How many images this user has generated.",
            "type": "integer"
          },
          "megapixelsteps": {
            "description": "How many megapixelsteps this user has generated.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "CreateTeamInput": {
        "properties": {
          "info": {
            "description": "Extra information or comments about this team.",
            "example": "Anarchy is emergent order.",
            "maxLength": 1000,
            "minLength": 3,
            "type": "string"
          },
          "name": {
            "description": "The name of the team. No profanity allowed!",
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DeleteTimeoutIPInput": {
        "properties": {
          "ipaddr": {
            "description": "The IP address or CIDR to remove from timeout.",
            "example": "127.0.0.1",
            "maxLength": 40,
            "minLength": 7,
            "type": "string"
          }
        },
        "required": [
          "ipaddr"
        ],
        "type": "object"
      },
      "DeletedTeam": {
        "properties": {
          "deleted_id": {
            "description": "The ID of the deleted team.",
            "type": "string"
          },
          "deleted_name": {
            "description": "The Name of the deleted team.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeletedWorker": {
        "properties": {
          "deleted_id": {
            "description": "The ID of the deleted worker.",
            "type": "string"
          },
          "deleted_name": {
            "description": "The Name of the deleted worker.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtraSourceImage": {
        "properties": {
          "image": {
            "description": "The Base64-encoded webp to use for further processing.",
            "type": "string"
          },
          "strength": {
            "default": 1,
            "description": "Optional field, determining the strength to use for the processing",
            "type": "number"
          }
        },
        "type": "object"
      },
      "FilterDetails": {
        "properties": {
          "description": {
            "description": "Description about this regex.",
            "type": "string"
          },
          "filter_type": {
            "description": "The integer defining this filter type.",
            "example": 10,
            "maximum": 29,
            "minimum": 10,
            "type": "integer"
          },
          "id": {
            "description": "The UUID of this filter.",
            "type": "string"
          },
          "regex": {
            "description": "The regex for this filter.",
            "example": "ac.*",
            "type": "string"
          },
          "replacement": {
            "default": "",
            "description": "The replacement string for this regex.",
            "type": "string"
          },
          "user": {
            "description": "The moderator which added or last updated this regex.",
            "type": "string"
          }
        },
        "required": [
          "filter_type",
          "id",
          "regex",
          "user"
        ],
        "type": "object"
      },
      "FilterPromptSuspicion": {
        "properties": {
          "matches": {
            "items": {
              "description": "Which words in the prompt matched the filters.",
              "type": "string"
            },
            "type": "array"
          },
          "suspicion": {
            "default": 0,
            "description": "Rates how suspicious the provided prompt is. A suspicion over 2 means it would be blocked.",
            "type": "string"
          }
        },
        "required": [
          "suspicion"
        ],
        "type": "object"
      },
      "FilterRegex": {
        "properties": {
          "filter_type": {
            "description": "The integer defining this filter type.",
            "example": 10,
            "maximum": 29,
            "minimum": 10,
            "type": "integer"
          },
          "regex": {
            "description": "The full regex for this filter type.",
            "type": "string"
          }
        },
        "required": [
          "filter_type",
          "regex"
        ],
        "type": "object"
      },
      "Generation": {
        "properties": {
          "model": {
            "description": "The model which generated this image.",
            "title": "Generation Model",
            "type": "string"
          },
          "state": {
            "default": "ok",
            "description": "OBSOLETE (Use the gen_metadata field). The state of this generation.",
            "enum": [
              "ok",
              "censored"
            ],
            "example": "ok",
            "title": "Generation State",
            "type": "string"
          },
          "worker_id": {
            "description": "The UUID of the worker which generated this image.",
            "title": "Worker ID",
            "type": "string"
          },
          "worker_name": {
            "description": "The name of the worker which generated this image.",
            "title": "Worker Name",
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "GenerationInputKobold": {
        "properties": {
          "allow_downgrade": {
            "default": false,
            "description": "When true and the request requires upfront kudos and the account does not have enough The request will be downgraded in max context and max tokens so that it does not need upfront kudos.",
            "type": "boolean"
          },
          "disable_batching": {
            "default": false,
            "description": "When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons.",
            "type": "boolean"
          },
          "dry_run": {
            "default": false,
            "description": "When true, the endpoint will simply return the cost of the request in kudos and exit.",
            "type": "boolean"
          },
          "extra_source_images": {
            "items": {
              "$ref": "#/components/schemas/ExtraSourceImage"
            },
            "type": "array"
          },
          "models": {
            "items": {
              "description": "Specify which models are allowed to be used for this request.",
              "type": "string"
            },
            "type": "array"
          },
          "params": {
            "$ref": "#/components/schemas/ModelGenerationInputKobold"
          },
          "prompt": {
            "description": "The prompt which will be sent to KoboldAI to generate text.",
            "type": "string"
          },
          "proxied_account": {
            "description": "If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from.",
            "type": "string"
          },
          "slow_workers": {
            "default": true,
            "description": "When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.",
            "type": "boolean"
          },
          "softprompt": {
            "description": "Specify which softpompt needs to be used to service this request.",
            "minLength": 1,
            "type": "string"
          },
          "trusted_workers": {
            "default": false,
            "description": "When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!",
            "type": "boolean"
          },
          "webhook": {
            "description": "Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.",
            "type": "string"
          },
          "worker_blacklist": {
            "default": false,
            "description": "If true, the worker list will be treated as a blacklist instead of a whitelist.",
            "type": "boolean"
          },
          "workers": {
            "items": {
              "description": "Specify up to 5 workers which are allowed to service this request.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GenerationInputStable": {
        "properties": {
          "allow_downgrade": {
            "default": false,
            "description": "When true and the request requires upfront kudos and the account does not have enough The request will be downgraded in steps and resolution so that it does not need upfront kudos.",
            "type": "boolean"
          },
          "censor_nsfw": {
            "default": false,
            "description": "If the request is SFW, and the worker accidentally generates NSFW, it will send back a censored image.",
            "type": "boolean"
          },
          "disable_batching": {
            "default": false,
            "description": "When true, This request will not use batching. This will allow you to retrieve accurate seeds. Feature is restricted to Trusted users and Patreons.",
            "type": "boolean"
          },
          "dry_run": {
            "default": false,
            "description": "When true, the endpoint will simply return the cost of the request in kudos and exit.",
            "type": "boolean"
          },
          "extra_source_images": {
            "items": {
              "$ref": "#/components/schemas/ExtraSourceImage"
            },
            "type": "array"
          },
          "models": {
            "items": {
              "description": "Specify which models are allowed to be used for this request.",
              "type": "string"
            },
            "type": "array"
          },
          "nsfw": {
            "default": false,
            "description": "Set to true if this request is NSFW. This will skip workers which censor images.",
            "type": "boolean"
          },
          "params": {
            "$ref": "#/components/schemas/ModelGenerationInputStable"
          },
          "prompt": {
            "description": "The prompt which will be sent to Stable Diffusion to generate an image.",
            "minLength": 1,
            "type": "string"
          },
          "proxied_account": {
            "description": "If using a service account as a proxy, provide this value to identify the actual account from which this request is coming from.",
            "type": "string"
          },
          "r2": {
            "default": true,
            "description": "If True, the image will be sent via cloudflare r2 download link.",
            "type": "boolean"
          },
          "replacement_filter": {
            "default": true,
            "description": "If enabled, suspicious prompts are sanitized through a string replacement filter instead.",
            "type": "boolean"
          },
          "shared": {
            "default": false,
            "description": "If True, The image will be shared with LAION for improving their dataset. This will also reduce your kudos consumption by 2. For anonymous users, this is always True.",
            "type": "boolean"
          },
          "slow_workers": {
            "default": true,
            "description": "When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.",
            "type": "boolean"
          },
          "source_image": {
            "description": "The Base64-encoded webp to use for img2img.",
            "type": "string"
          },
          "source_mask": {
            "description": "If source_processing is set to 'inpainting' or 'outpainting', this parameter can be optionally provided as the  Base64-encoded webp mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel.",
            "type": "string"
          },
          "source_processing": {
            "default": "img2img",
            "description": "If source_image is provided, specifies how to process it.",
            "enum": [
              "img2img",
              "inpainting",
              "outpainting",
              "remix"
            ],
            "example": "img2img",
            "type": "string"
          },
          "trusted_workers": {
            "default": false,
            "description": "When true, only trusted workers will serve this request. When False, Evaluating workers will also be used which can increase speed but adds more risk!",
            "type": "boolean"
          },
          "webhook": {
            "description": "Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.",
            "example": "https://haidra.net/00000000-0000-0000-0000-000000000000",
            "maxLength": 1024,
            "minLength": 10,
            "type": "string"
          },
          "worker_blacklist": {
            "default": false,
            "description": "If true, the worker list will be treated as a blacklist instead of a whitelist.",
            "type": "boolean"
          },
          "workers": {
            "items": {
              "description": "Specify up to 5 workers which are allowed to service this request.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "prompt"
        ],
        "type": "object"
      },
      "GenerationKobold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Generation"
          },
          {
            "properties": {
              "gen_metadata": {
                "items": {
                  "$ref": "#/components/schemas/GenerationMetadataKobold"
                },
                "type": "array"
              },
              "seed": {
                "default": 0,
                "description": "The seed which generated this text.",
                "title": "Generation Seed",
                "type": "integer"
              },
              "text": {
                "description": "The generated text.",
                "minLength": 0,
                "title": "Generated Text",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "GenerationMetadataKobold": {
        "properties": {
          "ref": {
            "description": "Optionally a reference for the metadata (e.g. a lora ID)",
            "maxLength": 255,
            "type": "string"
          },
          "type": {
            "description": "The relevance of the metadata field",
            "enum": [
              "censorship"
            ],
            "example": "censorship",
            "type": "string"
          },
          "value": {
            "description": "The value of the metadata field",
            "enum": [
              "csam"
            ],
            "example": "csam",
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "type": "object"
      },
      "GenerationMetadataStable": {
        "properties": {
          "ref": {
            "description": "Optionally a reference for the metadata (e.g. a lora ID)",
            "maxLength": 255,
            "type": "string"
          },
          "type": {
            "description": "The relevance of the metadata field",
            "enum": [
              "lora",
              "ti",
              "censorship",
              "source_image",
              "source_mask",
              "extra_source_images",
              "batch_index"
            ],
            "example": "lora",
            "type": "string"
          },
          "value": {
            "description": "The value of the metadata field",
            "enum": [
              "download_failed",
              "parse_failed",
              "baseline_mismatch",
              "csam",
              "nsfw",
              "see_ref"
            ],
            "example": "download_failed",
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "type": "object"
      },
      "GenerationPayload": {
        "properties": {
          "id": {
            "description": "The UUID for this generation.",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/ModelPayload"
          },
          "skipped": {
            "$ref": "#/components/schemas/NoValidRequestFound"
          }
        },
        "type": "object"
      },
      "GenerationPayloadStable": {
        "properties": {
          "extra_source_images": {
            "items": {
              "$ref": "#/components/schemas/ExtraSourceImage"
            },
            "type": "array"
          },
          "id": {
            "description": "The UUID for this image generation.",
            "type": "string"
          },
          "ids": {
            "items": {
              "description": "The UUID for this image generation.",
              "example": "00000000-0000-0000-0000-000000000000",
              "type": "string"
            },
            "type": "array"
          },
          "model": {
            "description": "Which of the available models to use for this request.",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/ModelPayloadStable"
          },
          "r2_upload": {
            "description": "The r2 upload link to use to upload this image.",
            "type": "string"
          },
          "r2_uploads": {
            "items": {
              "description": "The r2 upload link to use to upload this image.",
              "type": "string"
            },
            "type": "array"
          },
          "skipped": {
            "$ref": "#/components/schemas/NoValidRequestFoundStable"
          },
          "source_image": {
            "description": "The Base64-encoded webp to use for img2img.",
            "type": "string"
          },
          "source_mask": {
            "description": "If img_processing is set to 'inpainting' or 'outpainting', this parameter can be optionally provided as the mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel.",
            "type": "string"
          },
          "source_processing": {
            "default": "img2img",
            "description": "If source_image is provided, specifies how to process it.",
            "enum": [
              "img2img",
              "inpainting",
              "outpainting",
              "remix"
            ],
            "example": "img2img",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenerationStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Generation"
          },
          {
            "properties": {
              "censored": {
                "description": "When true this image has been censored by the worker's safety filter.",
                "type": "boolean"
              },
              "gen_metadata": {
                "items": {
                  "$ref": "#/components/schemas/GenerationMetadataStable"
                },
                "type": "array"
              },
              "id": {
                "description": "The ID for this image.",
                "title": "Generation ID",
                "type": "string"
              },
              "img": {
                "description": "The generated image as a Base64-encoded .webp file.",
                "title": "Generated Image",
                "type": "string"
              },
              "seed": {
                "description": "The seed which generated this image.",
                "title": "Generation Seed",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "GenerationSubmitted": {
        "properties": {
          "reward": {
            "description": "The amount of kudos gained for submitting this request.",
            "example": 10,
            "type": "number"
          }
        },
        "type": "object"
      },
      "HordeModes": {
        "properties": {
          "invite_only_mode": {
            "description": "When True, this horde will not only accept worker explicitly invited to join.",
            "type": "boolean"
          },
          "maintenance_mode": {
            "description": "When True, this horde will not accept new requests for image generation, but will finish processing the ones currently in the queue.",
            "type": "boolean"
          },
          "raid_mode": {
            "description": "When True, this horde will not always provide full information in order to throw off attackers.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HordePerformance": {
        "properties": {
          "interrogator_count": {
            "description": "How many workers are actively processing image interrogations in this {horde_noun} in the past 5 minutes.",
            "type": "integer"
          },
          "interrogator_thread_count": {
            "description": "How many worker threads are actively processing image interrogation in this {horde_noun} in the past 5 minutes.",
            "type": "integer"
          },
          "past_minute_megapixelsteps": {
            "description": "How many megapixelsteps this horde generated in the last minute.",
            "type": "number"
          },
          "past_minute_tokens": {
            "description": "How many tokens this horde generated in the last minute.",
            "type": "number"
          },
          "queued_forms": {
            "description": "The amount of image interrogations waiting and processing currently in this horde.",
            "type": "number"
          },
          "queued_megapixelsteps": {
            "description": "The amount of megapixelsteps in waiting and processing requests currently in this horde.",
            "type": "number"
          },
          "queued_requests": {
            "description": "The amount of waiting and processing image requests currently in this horde.",
            "type": "integer"
          },
          "queued_text_requests": {
            "description": "The amount of waiting and processing text requests currently in this horde.",
            "type": "integer"
          },
          "queued_tokens": {
            "description": "The amount of tokens in waiting and processing requests currently in this horde.",
            "type": "number"
          },
          "text_thread_count": {
            "description": "How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes.",
            "type": "integer"
          },
          "text_worker_count": {
            "description": "How many workers are actively processing prompt generations in this horde in the past 5 minutes.",
            "type": "integer"
          },
          "thread_count": {
            "description": "How many worker threads are actively processing prompt generations in this {horde_noun} in the past 5 minutes.",
            "type": "integer"
          },
          "worker_count": {
            "description": "How many workers are actively processing prompt generations in this horde in the past 5 minutes.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IPTimeout": {
        "properties": {
          "ipaddr": {
            "description": "The CIDR which is in timeout.",
            "example": "127.0.0.1",
            "maxLength": 40,
            "minLength": 7,
            "type": "string"
          },
          "seconds": {
            "description": "How many more seconds this IP block is in timeout ",
            "example": 1440,
            "type": "integer"
          }
        },
        "required": [
          "ipaddr",
          "seconds"
        ],
        "type": "object"
      },
      "ImgModelStats": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/SinglePeriodImgModelStats"
          },
          "month": {
            "$ref": "#/components/schemas/SinglePeriodImgModelStats"
          },
          "total": {
            "$ref": "#/components/schemas/SinglePeriodImgModelStats"
          }
        },
        "type": "object"
      },
      "InterrogationFormResult": {
        "properties": {
          "*": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "InterrogationFormStatus": {
        "properties": {
          "form": {
            "description": "The name of this interrogation form.",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/InterrogationFormResult"
          },
          "state": {
            "description": "The overall status of this interrogation.",
            "title": "Interrogation State",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InterrogationPopFormPayload": {
        "properties": {
          "form": {
            "description": "The name of this interrogation form",
            "enum": [
              "caption",
              "interrogation",
              "nsfw.",
              "GFPGAN",
              "RealESRGAN_x4plus",
              "RealESRGAN_x2plus",
              "RealESRGAN_x4plus_anime_6B",
              "NMKD_Siax",
              "4x_AnimeSharp",
              "CodeFormers",
              "strip_background"
            ],
            "example": "caption",
            "type": "string"
          },
          "id": {
            "description": "The UUID of the interrogation form. Use this to post the results in the future.",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/ModelInterrogationFormPayloadStable"
          },
          "r2_upload": {
            "description": "The URL in which the post-processed image can be uploaded.",
            "type": "string"
          },
          "source_image": {
            "description": "The URL From which the source image can be downloaded.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InterrogationPopInput": {
        "properties": {
          "amount": {
            "default": 1,
            "description": "The amount of forms to pop at the same time.",
            "type": "integer"
          },
          "bridge_agent": {
            "default": "unknown",
            "description": "The worker name, version and website.",
            "example": "AI Horde Worker reGen:4.1.0:https://github.com/Haidra-Org/horde-worker-reGen",
            "maxLength": 1000,
            "type": "string"
          },
          "forms": {
            "items": {
              "description": "The type of interrogation this worker can fulfil.",
              "enum": [
                "caption",
                "interrogation",
                "nsfw",
                "GFPGAN",
                "RealESRGAN_x4plus",
                "RealESRGAN_x2plus",
                "RealESRGAN_x4plus_anime_6B",
                "NMKD_Siax",
                "4x_AnimeSharp",
                "CodeFormers",
                "strip_background"
              ],
              "example": "caption",
              "type": "string"
            },
            "type": "array"
          },
          "max_tiles": {
            "default": 16,
            "description": "The maximum amount of 512x512 tiles this worker can post-process.",
            "maximum": 256,
            "minimum": 1,
            "type": "integer"
          },
          "name": {
            "description": "The Name of the Worker.",
            "type": "string"
          },
          "priority_usernames": {
            "items": {
              "description": "Users with priority to use this worker.",
              "type": "string"
            },
            "type": "array"
          },
          "threads": {
            "default": 1,
            "description": "How many threads this worker is running. This is used to accurately the current power available in the horde.",
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "InterrogationPopPayload": {
        "properties": {
          "forms": {
            "items": {
              "$ref": "#/components/schemas/InterrogationPopFormPayload"
            },
            "type": "array"
          },
          "skipped": {
            "$ref": "#/components/schemas/NoValidInterrogationsFound"
          }
        },
        "type": "object"
      },
      "InterrogationStatus": {
        "properties": {
          "forms": {
            "items": {
              "$ref": "#/components/schemas/InterrogationFormStatus"
            },
            "type": "array"
          },
          "state": {
            "description": "The overall status of this interrogation.",
            "title": "Interrogation State",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KudosAwarded": {
        "properties": {
          "awarded": {
            "description": "The amount of Kudos awarded.",
            "example": 100,
            "type": "number"
          }
        },
        "type": "object"
      },
      "KudosTransferred": {
        "properties": {
          "transferred": {
            "description": "The amount of Kudos tranferred.",
            "example": 100,
            "type": "number"
          }
        },
        "type": "object"
      },
      "ModelGenerationInputKobold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelPayloadRootKobold"
          },
          {
            "properties": {},
            "type": "object"
          }
        ]
      },
      "ModelGenerationInputStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelPayloadRootStable"
          },
          {
            "properties": {
              "n": {
                "default": 1,
                "description": "The amount of images to generate.",
                "maximum": 20,
                "minimum": 1,
                "type": "integer"
              },
              "steps": {
                "default": 30,
                "maximum": 500,
                "minimum": 1,
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "ModelInterrogationFormPayloadStable": {
        "properties": {
          "*": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ModelInterrogationFormStable": {
        "properties": {
          "name": {
            "description": "The type of interrogation this is.",
            "enum": [
              "caption",
              "interrogation",
              "nsfw",
              "GFPGAN",
              "RealESRGAN_x4plus",
              "RealESRGAN_x2plus",
              "RealESRGAN_x4plus_anime_6B",
              "NMKD_Siax",
              "4x_AnimeSharp",
              "CodeFormers",
              "strip_background"
            ],
            "example": "caption",
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/ModelInterrogationFormPayloadStable"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ModelInterrogationInputStable": {
        "properties": {
          "forms": {
            "items": {
              "$ref": "#/components/schemas/ModelInterrogationFormStable"
            },
            "type": "array"
          },
          "slow_workers": {
            "default": true,
            "description": "When True, allows slower workers to pick up this request. Disabling this incurs an extra kudos cost.",
            "type": "boolean"
          },
          "source_image": {
            "description": "The public URL of the image to interrogate.",
            "type": "string"
          },
          "webhook": {
            "description": "Provide a URL where the AI Horde will send a POST call after each delivered generation. The request will include the details of the job as well as the request ID.",
            "example": "https://haidra.net/00000000-0000-0000-0000-000000000000",
            "maxLength": 1024,
            "minLength": 10,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModelPayload": {
        "properties": {
          "n": {
            "description": "The amount of images to generate.",
            "example": 1,
            "type": "integer"
          },
          "prompt": {
            "description": "The prompt which will be sent to the horde against which to run inference.",
            "type": "string"
          },
          "seed": {
            "description": "The seed to use to generete this request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModelPayloadLorasStable": {
        "properties": {
          "clip": {
            "default": 1,
            "description": "The strength of the LoRa to apply to the clip model.",
            "maximum": 5,
            "minimum": -5,
            "type": "number"
          },
          "inject_trigger": {
            "description": "If set, will try to discover a trigger for this LoRa which matches or is similar to this string and inject it into the prompt. If 'any' is specified it will be pick the first trigger.",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "is_version": {
            "default": false,
            "description": "If true, will consider the LoRa ID as a CivitAI version ID and search accordingly. Ensure the name is an integer.",
            "type": "boolean"
          },
          "model": {
            "default": 1,
            "description": "The strength of the LoRa to apply to the SD model.",
            "maximum": 5,
            "minimum": -5,
            "type": "number"
          },
          "name": {
            "description": "The exact name or CivitAI Model Page ID of the LoRa. If is_version is true, this should be the CivitAI version ID.",
            "example": "Magnagothica",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ModelPayloadRootKobold": {
        "properties": {
          "dynatemp_exponent": {
            "default": 1,
            "description": "Dynamic temperature exponent value.",
            "maximum": 5,
            "minimum": 0,
            "type": "number"
          },
          "dynatemp_range": {
            "default": 0,
            "description": "Dynamic temperature range value.",
            "maximum": 5,
            "minimum": 0,
            "type": "number"
          },
          "frmtadsnsp": {
            "description": "Input formatting option. When enabled, adds a leading space to your input if there is no trailing whitespace at the end of the previous action.",
            "example": false,
            "type": "boolean"
          },
          "frmtrmblln": {
            "description": "Output formatting option. When enabled, replaces all occurrences of two or more consecutive newlines in the output with one newline.",
            "example": false,
            "type": "boolean"
          },
          "frmtrmspch": {
            "description": "Output formatting option. When enabled, removes #/@%}{+=~|\\^<> from the output.",
            "example": false,
            "type": "boolean"
          },
          "frmttriminc": {
            "description": "Output formatting option. When enabled, removes some characters from the end of the output such that the output doesn't end in the middle of a sentence. If the output is less than one sentence long, does nothing.",
            "example": false,
            "type": "boolean"
          },
          "max_context_length": {
            "default": 1024,
            "description": "Maximum number of tokens to send to the model.",
            "maximum": 32000,
            "minimum": 80,
            "type": "integer"
          },
          "max_length": {
            "default": 80,
            "description": "Number of tokens to generate.",
            "maximum": 1024,
            "minimum": 16,
            "type": "integer"
          },
          "min_p": {
            "default": 0,
            "description": "Min-p sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "n": {
            "example": 1,
            "maximum": 20,
            "minimum": 1,
            "type": "integer"
          },
          "rep_pen": {
            "description": "Base repetition penalty value.",
            "maximum": 3,
            "minimum": 1,
            "type": "number"
          },
          "rep_pen_range": {
            "description": "Repetition penalty range.",
            "maximum": 4096,
            "minimum": 0,
            "type": "integer"
          },
          "rep_pen_slope": {
            "description": "Repetition penalty slope.",
            "maximum": 10,
            "minimum": 0,
            "type": "number"
          },
          "sampler_order": {
            "items": {
              "description": "Array of integers representing the sampler order to be used.",
              "type": "integer"
            },
            "type": "array"
          },
          "singleline": {
            "description": "Output formatting option. When enabled, removes everything after the first line of the output, including the newline.",
            "example": false,
            "type": "boolean"
          },
          "smoothing_factor": {
            "default": 0,
            "description": "Quadratic sampling value.",
            "maximum": 10,
            "minimum": 0,
            "type": "number"
          },
          "stop_sequence": {
            "items": {
              "description": "An array of string sequences whereby the model will stop generating further tokens. The returned text WILL contain the stop sequence.",
              "type": "string"
            },
            "type": "array"
          },
          "temperature": {
            "description": "Temperature value.",
            "maximum": 5,
            "minimum": 0,
            "type": "number"
          },
          "tfs": {
            "description": "Tail free sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "top_a": {
            "description": "Top-a sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "top_k": {
            "description": "Top-k sampling value.",
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          },
          "top_p": {
            "description": "Top-p sampling value.",
            "maximum": 1,
            "minimum": 0.001,
            "type": "number"
          },
          "typical": {
            "description": "Typical sampling value.",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "use_default_badwordsids": {
            "description": "When True, uses the default KoboldAI bad word IDs.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ModelPayloadRootStable": {
        "properties": {
          "cfg_scale": {
            "default": 7.5,
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          },
          "clip_skip": {
            "description": "The number of CLIP language processor layers to skip.",
            "example": 1,
            "maximum": 12,
            "minimum": 1,
            "type": "integer"
          },
          "control_type": {
            "enum": [
              "canny",
              "hed",
              "depth",
              "normal",
              "openpose",
              "seg",
              "scribble",
              "fakescribbles",
              "hough"
            ],
            "example": "canny",
            "type": "string"
          },
          "denoising_strength": {
            "example": 0.75,
            "maximum": 1,
            "minimum": 0.01,
            "type": "number"
          },
          "facefixer_strength": {
            "example": 0.75,
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "height": {
            "default": 512,
            "description": "The height of the image to generate.",
            "maximum": 3072,
            "minimum": 64,
            "multipleOf": 64,
            "type": "integer"
          },
          "hires_fix": {
            "default": false,
            "description": "Set to True to process the image at base resolution before upscaling and re-processing.",
            "type": "boolean"
          },
          "image_is_control": {
            "default": false,
            "description": "Set to True if the image submitted is a pre-generated control map for ControlNet use.",
            "type": "boolean"
          },
          "karras": {
            "default": false,
            "description": "Set to True to enable karras noise scheduling tweaks.",
            "type": "boolean"
          },
          "loras": {
            "items": {
              "$ref": "#/components/schemas/ModelPayloadLorasStable"
            },
            "type": "array"
          },
          "post_processing": {
            "items": {
              "description": "The list of post-processors to apply to the image, in the order to be applied.",
              "enum": [
                "GFPGAN",
                "RealESRGAN_x4plus",
                "RealESRGAN_x2plus",
                "RealESRGAN_x4plus_anime_6B",
                "NMKD_Siax",
                "4x_AnimeSharp",
                "CodeFormers",
                "strip_background"
              ],
              "example": "GFPGAN",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "return_control_map": {
            "default": false,
            "description": "Set to True if you want the ControlNet map returned instead of a generated image.",
            "type": "boolean"
          },
          "sampler_name": {
            "default": "k_euler_a",
            "enum": [
              "k_euler",
              "lcm",
              "k_euler_a",
              "k_dpmpp_2s_a",
              "DDIM",
              "dpmsolver",
              "k_lms",
              "k_dpm_fast",
              "k_dpmpp_sde",
              "k_dpm_2",
              "k_dpm_2_a",
              "k_dpm_adaptive",
              "k_heun",
              "k_dpmpp_2m"
            ],
            "example": "k_euler",
            "type": "string"
          },
          "seed": {
            "description": "The seed to use to generate this request. You can pass text as well as numbers.",
            "example": "The little seed that could",
            "type": "string"
          },
          "seed_variation": {
            "description": "If passed with multiple n, the provided seed will be incremented every time by this value.",
            "example": 1,
            "maximum": 1000,
            "minimum": 1,
            "type": "integer"
          },
          "special": {
            "$ref": "#/components/schemas/ModelSpecialPayloadStable"
          },
          "tiling": {
            "default": false,
            "description": "Set to True to create images that stitch together seamlessly.",
            "type": "boolean"
          },
          "tis": {
            "items": {
              "$ref": "#/components/schemas/ModelPayloadTextualInversionsStable"
            },
            "type": "array"
          },
          "width": {
            "default": 512,
            "description": "The width of the image to generate.",
            "maximum": 3072,
            "minimum": 64,
            "multipleOf": 64,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ModelPayloadStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelPayloadRootStable"
          },
          {
            "properties": {
              "ddim_steps": {
                "default": 30,
                "type": "integer"
              },
              "n_iter": {
                "default": 1,
                "description": "The amount of images to generate.",
                "type": "integer"
              },
              "prompt": {
                "description": "The prompt which will be sent to Stable Diffusion to generate an image.",
                "type": "string"
              },
              "use_nsfw_censor": {
                "description": "When true will apply NSFW censoring model on the generation.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "ModelPayloadTextualInversionsStable": {
        "properties": {
          "inject_ti": {
            "description": "If set, Will automatically add this TI filename to the prompt or negative prompt accordingly using the provided strength. If this is set to None, then the user will have to manually add the embed to the prompt themselves.",
            "enum": [
              "prompt",
              "negprompt"
            ],
            "example": "prompt",
            "type": "string"
          },
          "name": {
            "description": "The exact name or CivitAI ID of the Textual Inversion.",
            "example": "7808",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "strength": {
            "default": 1,
            "description": "The strength with which to apply the TI to the prompt. Only used when inject_ti is not None",
            "maximum": 5,
            "minimum": -5,
            "type": "number"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ModelSpecialPayloadStable": {
        "properties": {
          "*": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ModifyTeam": {
        "properties": {
          "info": {
            "description": "The Info of the team.",
            "type": "string"
          },
          "id": {
            "description": "The ID of the team.",
            "type": "string"
          },
          "name": {
            "description": "The Name of the team.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModifyTeamInput": {
        "properties": {
          "info": {
            "description": "Extra information or comments about this team.",
            "example": "Anarchy is emergent order.",
            "maxLength": 1000,
            "minLength": 3,
            "type": "string"
          },
          "name": {
            "description": "The name of the team. No profanity allowed!",
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModifyUser": {
        "properties": {
          "admin_comment": {
            "description": "The new admin comment.",
            "example": "User is sus",
            "maxLength": 500,
            "minLength": 5,
            "type": "string"
          },
          "concurrency": {
            "description": "The request concurrency this user has after this request.",
            "example": 30,
            "type": "integer"
          },
          "contact": {
            "description": "The new contact details.",
            "example": "email@example.com",
            "type": "string"
          },
          "customizer": {
            "description": "The user's new customizer status.",
            "type": "boolean"
          },
          "education": {
            "description": "The user's new education status.",
            "type": "boolean"
          },
          "flagged": {
            "description": "The user's new flagged status.",
            "type": "boolean"
          },
          "moderator": {
            "description": "The user's new moderator status.",
            "example": false,
            "type": "boolean"
          },
          "monthly_kudos": {
            "description": "The user's new monthly kudos total.",
            "example": 0,
            "type": "integer"
          },
          "new_kudos": {
            "description": "The new total Kudos this user has after this request.",
            "type": "number"
          },
          "new_suspicion": {
            "description": "The user's new suspiciousness rating.",
            "type": "integer"
          },
          "public_workers": {
            "description": "The user's new public_workers status.",
            "example": false,
            "type": "boolean"
          },
          "service": {
            "description": "The user's new service status.",
            "type": "boolean"
          },
          "special": {
            "description": "The user's new special status.",
            "type": "boolean"
          },
          "trusted": {
            "description": "The user's new trusted status.",
            "type": "boolean"
          },
          "usage_multiplier": {
            "description": "Multiplies the amount of kudos lost when generating images.",
            "example": 1,
            "type": "number"
          },
          "username": {
            "description": "The user's new username.",
            "example": "username#1",
            "type": "string"
          },
          "vpn": {
            "description": "The user's new vpn status.",
            "type": "boolean"
          },
          "worker_invited": {
            "description": "Whether this user has been invited to join a worker to the horde and how many of them. When 0, this user cannot add (new) workers to the horde.",
            "example": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ModifyUserInput": {
        "properties": {
          "admin_comment": {
            "description": "Add further information about this user for the other admins.",
            "example": "User is sus",
            "maxLength": 500,
            "minLength": 5,
            "type": "string"
          },
          "concurrency": {
            "description": "The amount of concurrent request this user can have.",
            "maximum": 500,
            "minimum": 0,
            "type": "integer"
          },
          "contact": {
            "description": "Contact details for the horde admins to reach the user in case of emergency. This is only visible to horde moderators.",
            "example": "email@example.com",
            "maxLength": 500,
            "minLength": 5,
            "type": "string"
          },
          "customizer": {
            "description": "When set to true, the user will be able to serve custom Stable Diffusion models which do not exist in the Official AI Horde Model Reference.",
            "example": false,
            "type": "boolean"
          },
          "education": {
            "description": "When set to true, the user is considered an education account and some options become more restrictive.",
            "example": false,
            "type": "boolean"
          },
          "filtered": {
            "description": "When set to true, the replacement filter will always be applied against this user",
            "example": false,
            "type": "boolean"
          },
          "flagged": {
            "description": "When set to true, the user cannot tranfer kudos and all their workers are put into permanent maintenance.",
            "example": false,
            "type": "boolean"
          },
          "kudos": {
            "description": "The amount of kudos to modify (can be negative).",
            "type": "number"
          },
          "moderator": {
            "description": "Set to true to make this user a horde moderator.",
            "example": false,
            "type": "boolean"
          },
          "monthly_kudos": {
            "description": "When specified, will start assigning the user monthly kudos, starting now!",
            "type": "integer"
          },
          "public_workers": {
            "description": "Set to true to make this user display their worker IDs.",
            "example": false,
            "type": "boolean"
          },
          "reset_suspicion": {
            "description": "Set the user's suspicion back to 0.",
            "type": "boolean"
          },
          "service": {
            "description": "When set to true, the user is considered a service account proxying the requests for other users.",
            "example": false,
            "type": "boolean"
          },
          "special": {
            "description": "When set to true, The user can send special payloads.",
            "example": false,
            "type": "boolean"
          },
          "trusted": {
            "description": "When set to true,the user and their servers will not be affected by suspicion.",
            "example": false,
            "type": "boolean"
          },
          "usage_multiplier": {
            "description": "The amount by which to multiply the users kudos consumption.",
            "maximum": 10,
            "minimum": 0.1,
            "type": "number"
          },
          "username": {
            "description": "When specified, will change the username. No profanity allowed!",
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "vpn": {
            "description": "When set to true, the user will be able to onboard workers behind a VPN. This should be used as a temporary solution until the user is trusted.",
            "example": false,
            "type": "boolean"
          },
          "worker_invited": {
            "description": "Set to the amount of workers this user is allowed to join to the horde when in worker invite-only mode.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ModifyWorker": {
        "properties": {
          "info": {
            "description": "The new state of the 'info' var for this worker.",
            "type": "string"
          },
          "maintenance": {
            "description": "The new state of the 'maintenance' var for this worker. When True, this worker will not pick up any new requests.",
            "type": "boolean"
          },
          "name": {
            "description": "The new name for this this worker.",
            "type": "string"
          },
          "paused": {
            "description": "The new state of the 'paused' var for this worker. When True, this worker will not be given any new requests.",
            "type": "boolean"
          },
          "team": {
            "description": "The new team of this worker.",
            "example": "Direct Action",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModifyWorkerInput": {
        "properties": {
          "info": {
            "description": "You can optionally provide a server note which will be seen in the server details. No profanity allowed!",
            "maxLength": 1000,
            "type": "string"
          },
          "maintenance": {
            "description": "Set to true to put this worker into maintenance.",
            "type": "boolean"
          },
          "maintenance_msg": {
            "description": "if maintenance is True, you can optionally provide a message to be used instead of the default maintenance message, so that the owner is informed.",
            "type": "string"
          },
          "name": {
            "description": "When this is set, it will change the worker's name. No profanity allowed!",
            "maxLength": 100,
            "minLength": 5,
            "type": "string"
          },
          "paused": {
            "description": "(Mods only) Set to true to pause this worker.",
            "type": "boolean"
          },
          "team": {
            "description": "The team towards which this worker contributes kudos.  It an empty string ('') is passed, it will leave the worker without a team. No profanity allowed!",
            "example": "0bed257b-e57c-4327-ac64-40cdfb1ac5e6",
            "maxLength": 36,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MonthlyKudos": {
        "properties": {
          "amount": {
            "description": "How much recurring Kudos this user receives monthly.",
            "type": "integer"
          },
          "last_received": {
            "description": "Last date this user received monthly Kudos.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Newspiece": {
        "properties": {
          "date_published": {
            "description": "The date this newspiece was published.",
            "type": "string"
          },
          "importance": {
            "description": "How critical this piece of news is.",
            "example": "Information",
            "type": "string"
          },
          "newspiece": {
            "description": "The actual piece of news.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NoValidInterrogationsFound": {
        "properties": {
          "bridge_version": {
            "description": "How many waiting requests were skipped because they require a higher version of the bridge than this worker is running (upgrade if you see this in your skipped list).",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "untrusted": {
            "description": "How many waiting requests were skipped because they demanded a trusted worker which this worker is not.",
            "minimum": 0,
            "type": "integer"
          },
          "worker_id": {
            "description": "How many waiting requests were skipped because they demanded a specific worker.",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NoValidRequestFound": {
        "properties": {
          "blacklist": {
            "description": "How many waiting requests were skipped because they demanded a generation with a word that this worker does not accept.",
            "minimum": 0,
            "type": "integer"
          },
          "bridge_version": {
            "description": "How many waiting requests were skipped because they require a higher version of the bridge than this worker is running (upgrade if you see this in your skipped list).",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "kudos": {
            "description": "How many waiting requests were skipped because the user didn't have enough kudos when this worker requires upfront kudos.",
            "type": "integer"
          },
          "models": {
            "description": "How many waiting requests were skipped because they demanded a different model than what this worker provides.",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "nsfw": {
            "description": "How many waiting requests were skipped because they demanded a nsfw generation which this worker does not provide.",
            "minimum": 0,
            "type": "integer"
          },
          "performance": {
            "description": "How many waiting requests were skipped because they required higher performance.",
            "minimum": 0,
            "type": "integer"
          },
          "untrusted": {
            "description": "How many waiting requests were skipped because they demanded a trusted worker which this worker is not.",
            "minimum": 0,
            "type": "integer"
          },
          "worker_id": {
            "description": "How many waiting requests were skipped because they demanded a specific worker.",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NoValidRequestFoundStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NoValidRequestFound"
          },
          {
            "properties": {
              "controlnet": {
                "description": "How many waiting requests were skipped because they requested a controlnet.",
                "type": "integer"
              },
              "img2img": {
                "description": "How many waiting requests were skipped because they requested img2img.",
                "type": "integer"
              },
              "lora": {
                "description": "How many waiting requests were skipped because they requested loras.",
                "type": "integer"
              },
              "max_pixels": {
                "description": "How many waiting requests were skipped because they demanded a higher size than this worker provides.",
                "type": "integer"
              },
              "painting": {
                "description": "How many waiting requests were skipped because they requested inpainting/outpainting.",
                "type": "integer"
              },
              "post-processing": {
                "description": "How many waiting requests were skipped because they requested post-processing.",
                "type": "integer"
              },
              "unsafe_ip": {
                "description": "How many waiting requests were skipped because they came from an unsafe IP.",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "PatchExistingFilter": {
        "properties": {
          "description": {
            "description": "Description about this regex.",
            "type": "string"
          },
          "filter_type": {
            "description": "The integer defining this filter type.",
            "example": 10,
            "maximum": 29,
            "minimum": 10,
            "type": "integer"
          },
          "regex": {
            "description": "The regex for this filter.",
            "example": "ac.*",
            "type": "string"
          },
          "replacement": {
            "default": "",
            "description": "The replacement string for this regex.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PopInput": {
        "properties": {
          "amount": {
            "default": 1,
            "description": "How many jobvs to pop at the same time",
            "maximum": 20,
            "minimum": 1,
            "type": "integer"
          },
          "bridge_agent": {
            "default": "unknown:0:unknown",
            "description": "The worker name, version and website.",
            "example": "AI Horde Worker reGen:4.1.0:https://github.com/Haidra-Org/horde-worker-reGen",
            "maxLength": 1000,
            "type": "string"
          },
          "models": {
            "items": {
              "description": "Which models this worker is serving.",
              "maxLength": 255,
              "minLength": 3,
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The Name of the Worker.",
            "type": "string"
          },
          "nsfw": {
            "default": false,
            "description": "Whether this worker can generate NSFW requests or not.",
            "type": "boolean"
          },
          "priority_usernames": {
            "items": {
              "description": "Users with priority to use this worker.",
              "type": "string"
            },
            "type": "array"
          },
          "require_upfront_kudos": {
            "default": false,
            "description": "If True, this worker will only pick up requests where the owner has the required kudos to consume already available.",
            "example": false,
            "type": "boolean"
          },
          "threads": {
            "default": 1,
            "description": "How many threads this worker is running. This is used to accurately the current power available in the horde.",
            "maximum": 50,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PopInputKobold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PopInput"
          },
          {
            "properties": {
              "max_context_length": {
                "default": 2048,
                "description": "The max amount of context to submit to this AI for sampling.",
                "type": "integer"
              },
              "max_length": {
                "default": 512,
                "description": "The maximum amount of tokens this worker can generate.",
                "type": "integer"
              },
              "softprompts": {
                "items": {
                  "description": "The available softprompt files on this worker for the currently running model.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "PopInputStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PopInput"
          },
          {
            "properties": {
              "allow_controlnet": {
                "default": true,
                "description": "If True, this worker will pick up requests requesting ControlNet.",
                "type": "boolean"
              },
              "allow_img2img": {
                "default": true,
                "description": "If True, this worker will pick up img2img requests.",
                "type": "boolean"
              },
              "allow_lora": {
                "default": true,
                "description": "If True, this worker will pick up requests requesting LoRas.",
                "type": "boolean"
              },
              "allow_painting": {
                "default": true,
                "description": "If True, this worker will pick up inpainting/outpainting requests.",
                "type": "boolean"
              },
              "allow_post_processing": {
                "default": true,
                "description": "If True, this worker will pick up requests requesting post-processing.",
                "type": "boolean"
              },
              "allow_unsafe_ipaddr": {
                "default": true,
                "description": "If True, this worker will pick up img2img requests coming from clients with an unsafe IP.",
                "type": "boolean"
              },
              "blacklist": {
                "items": {
                  "description": "Words which, when detected will refuste to pick up any jobs.",
                  "type": "string"
                },
                "type": "array"
              },
              "max_pixels": {
                "default": 262144,
                "description": "The maximum amount of pixels this worker can generate.",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "PutNewFilter": {
        "properties": {
          "description": {
            "description": "Description about this regex.",
            "type": "string"
          },
          "filter_type": {
            "description": "The integer defining this filter type.",
            "example": 10,
            "maximum": 29,
            "minimum": 10,
            "type": "integer"
          },
          "regex": {
            "description": "The regex for this filter.",
            "example": "ac.*",
            "type": "string"
          },
          "replacement": {
            "default": "",
            "description": "The replacement string for this regex.",
            "type": "string"
          }
        },
        "required": [
          "filter_type",
          "regex"
        ],
        "type": "object"
      },
      "RequestAsync": {
        "properties": {
          "id": {
            "description": "The UUID of the request. Use this to retrieve the request status in the future.",
            "type": "string"
          },
          "kudos": {
            "description": "The expected kudos consumption for this request.",
            "type": "number"
          },
          "message": {
            "description": "Any extra information from the horde about this request.",
            "type": "string"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/RequestSingleWarning"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RequestError": {
        "properties": {
          "message": {
            "description": "The error message for this status code.",
            "type": "string"
          },
          "rc": {
            "description": "The return code for this error. See: https://github.com/Haidra-Org/AI-Horde/blob/main/README_return_codes.md",
            "enum": [
              "MissingPrompt",
              "CorruptPrompt",
              "KudosValidationError",
              "NoValidActions",
              "InvalidSize",
              "InvalidPromptSize",
              "TooManySteps",
              "Profanity",
              "ProfaneWorkerName",
              "ProfaneBridgeAgent",
              "ProfaneWorkerInfo",
              "ProfaneUserName",
              "ProfaneUserContact",
              "ProfaneAdminComment",
              "ProfaneTeamName",
              "ProfaneTeamInfo",
              "TooLong",
              "TooLongWorkerName",
              "TooLongUserName",
              "NameAlreadyExists",
              "WorkerNameAlreadyExists",
              "TeamNameAlreadyExists",
              "PolymorphicNameConflict",
              "ImageValidationFailed",
              "SourceImageResolutionExceeded",
              "SourceImageSizeExceeded",
              "SourceImageUrlInvalid",
              "SourceImageUnreadable",
              "InpaintingMissingMask",
              "SourceMaskUnnecessary",
              "UnsupportedSampler",
              "UnsupportedModel",
              "ControlNetUnsupported",
              "ControlNetSourceMissing",
              "ControlNetInvalidPayload",
              "SourceImageRequiredForModel",
              "UnexpectedModelName",
              "TooManyUpscalers",
              "ProcGenNotFound",
              "InvalidAestheticAttempt",
              "AestheticsNotCompleted",
              "AestheticsNotPublic",
              "AestheticsDuplicate",
              "AestheticsMissing",
              "AestheticsSolo",
              "AestheticsConfused",
              "AestheticsAlreadyExist",
              "AestheticsServerRejected",
              "AestheticsServerError",
              "AestheticsServerDown",
              "AestheticsServerTimeout",
              "InvalidAPIKey",
              "WrongCredentials",
              "NotAdmin",
              "NotModerator",
              "NotOwner",
              "NotPrivileged",
              "AnonForbidden",
              "AnonForbiddenWorker",
              "AnonForbiddenUserMod",
              "NotTrusted",
              "UntrustedTeamCreation",
              "UntrustedUnsafeIP",
              "WorkerMaintenance",
              "WorkerFlaggedMaintenance",
              "TooManySameIPs",
              "WorkerInviteOnly",
              "UnsafeIP",
              "TimeoutIP",
              "TooManyNewIPs",
              "KudosUpfront",
              "SharedKeyEmpty",
              "SharedKeyExpired",
              "SharedKeyInsufficientKudos",
              "InvalidJobID",
              "RequestNotFound",
              "WorkerNotFound",
              "TeamNotFound",
              "FilterNotFound",
              "UserNotFound",
              "DuplicateGen",
              "AbortedGen",
              "RequestExpired",
              "TooManyPrompts",
              "NoValidWorkers",
              "MaintenanceMode",
              "TargetAccountFlagged",
              "SourceAccountFlagged",
              "FaultWhenKudosReceiving",
              "FaultWhenKudosSending",
              "TooFastKudosTransfers",
              "KudosTransferToAnon",
              "KudosTransferToSelf",
              "KudosTransferNotEnough",
              "NegativeKudosTransfer",
              "KudosTransferFromAnon",
              "InvalidAwardUsername",
              "KudosAwardToAnon",
              "NotAllowedAwards",
              "NoWorkerModSelected",
              "NoUserModSelected",
              "NoHordeModSelected",
              "NoTeamModSelected",
              "NoFilterModSelected",
              "NoSharedKeyModSelected",
              "BadRequest",
              "Forbidden",
              "Locked",
              "ControlNetMismatch",
              "HiResFixMismatch",
              "TooManyLoras",
              "BadLoraVersion",
              "TooManyTIs",
              "BetaAnonForbidden",
              "BetaComparisonFault",
              "BadCFGDecimals",
              "BadCFGNumber",
              "BadClientAgent",
              "SpecialMissingPayload",
              "SpecialForbidden",
              "SpecialMissingUsername",
              "SpecialModelNeedsSpecialUser",
              "SpecialFieldNeedsSpecialUser",
              "Img2ImgMismatch",
              "TilingMismatch",
              "EducationCannotSendKudos",
              "InvalidPriorityUsername",
              "OnlyServiceAccountProxy",
              "RequiresTrust",
              "InvalidRemixModel",
              "InvalidExtraSourceImages",
              "TooManyExtraSourceImages",
              "MissingFullSamplerOrder",
              "TooManyStopSequences",
              "ExcessiveStopSequence",
              "TokenOverflow",
              "MoreThanMinExtraSourceImage"
            ],
            "example": "ExampleHordeError",
            "type": "string"
          }
        },
        "required": [
          "rc"
        ],
        "type": "object"
      },
      "RequestInterrogationResponse": {
        "properties": {
          "id": {
            "description": "The UUID of the request. Use this to retrieve the request status in the future.",
            "type": "string"
          },
          "message": {
            "description": "Any extra information from the horde about this request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RequestSingleWarning": {
        "properties": {
          "code": {
            "description": "A unique identifier for this warning.",
            "enum": [
              "NoAvailableWorker",
              "ClipSkipMismatch",
              "StepsTooFew",
              "StepsTooMany",
              "CfgScaleMismatch",
              "CfgScaleTooSmall",
              "CfgScaleTooLarge",
              "SamplerMismatch",
              "SchedulerMismatch"
            ],
            "example": "NoAvailableWorker",
            "type": "string"
          },
          "message": {
            "description": "Something that you should be aware about this request, in plain text.",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RequestStatusCheck": {
        "properties": {
          "done": {
            "description": "True when all jobs in this request are done. Else False.",
            "type": "boolean"
          },
          "faulted": {
            "default": false,
            "description": "True when this request caused an internal server error and could not be completed.",
            "type": "boolean"
          },
          "finished": {
            "description": "The amount of finished jobs in this request.",
            "type": "integer"
          },
          "is_possible": {
            "default": true,
            "description": "If False, this request will not be able to be completed with the pool of workers currently available.",
            "type": "boolean"
          },
          "kudos": {
            "description": "The amount of total Kudos this request has consumed until now.",
            "type": "number"
          },
          "processing": {
            "description": "The amount of still processing jobs in this request.",
            "type": "integer"
          },
          "queue_position": {
            "description": "The position in the requests queue. This position is determined by relative Kudos amounts.",
            "type": "integer"
          },
          "restarted": {
            "description": "The amount of jobs that timed out and had to be restarted or were reported as failed by a worker.",
            "type": "integer"
          },
          "wait_time": {
            "description": "The expected amount to wait (in seconds) to generate all jobs in this request.",
            "type": "integer"
          },
          "waiting": {
            "description": "The amount of jobs waiting to be picked up by a worker.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RequestStatusKobold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RequestStatusCheck"
          },
          {
            "properties": {
              "generations": {
                "items": {
                  "$ref": "#/components/schemas/GenerationKobold"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "RequestStatusStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RequestStatusCheck"
          },
          {
            "properties": {
              "generations": {
                "items": {
                  "$ref": "#/components/schemas/GenerationStable"
                },
                "type": "array"
              },
              "shared": {
                "description": "If True, These images have been shared with LAION.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "RequestValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RequestError"
          },
          {
            "properties": {
              "errors": {
                "additionalProperties": {
                  "description": "The details of the validation error",
                  "type": "string"
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        ]
      },
      "SharedKeyDetails": {
        "properties": {
          "expiry": {
            "description": "The date at which this API key will expire.",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "The SharedKey ID.",
            "type": "string"
          },
          "kudos": {
            "description": "The Kudos limit assigned to this key.",
            "type": "integer"
          },
          "max_image_pixels": {
            "description": "The maximum amount of image pixels this key can generate per job. -1 means unlimited.",
            "type": "integer"
          },
          "max_image_steps": {
            "description": "The maximum amount of image steps this key can use per job. -1 means unlimited.",
            "type": "integer"
          },
          "max_text_tokens": {
            "description": "The maximum amount of text tokens this key can generate per job. -1 means unlimited.",
            "type": "integer"
          },
          "name": {
            "description": "The Shared Key Name.",
            "type": "string"
          },
          "username": {
            "description": "The owning user's unique Username. It is a combination of their chosen alias plus their ID.",
            "type": "string"
          },
          "utilized": {
            "description": "How much kudos has been utilized via this shared key until now.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SharedKeyInput": {
        "properties": {
          "expiry": {
            "default": -1,
            "description": "The amount of days after which this key will expire. If -1, this key will not expire.",
            "example": 30,
            "minimum": -1,
            "type": "integer"
          },
          "kudos": {
            "default": 5000,
            "description": "The Kudos limit assigned to this key. If -1, then anyone with this key can use an unlimited amount of kudos from this account.",
            "maximum": 50000000,
            "minimum": -1,
            "type": "integer"
          },
          "max_image_pixels": {
            "default": -1,
            "description": "The maximum amount of image pixels this key can generate per job. -1 means unlimited.",
            "maximum": 4194304,
            "minimum": -1,
            "type": "integer"
          },
          "max_image_steps": {
            "default": -1,
            "description": "The maximum amount of image steps this key can use per job. -1 means unlimited.",
            "maximum": 500,
            "minimum": -1,
            "type": "integer"
          },
          "max_text_tokens": {
            "default": -1,
            "description": "The maximum amount of text tokens this key can generate per job. -1 means unlimited.",
            "maximum": 500,
            "minimum": -1,
            "type": "integer"
          },
          "name": {
            "description": "A descriptive name for this key.",
            "example": "Mutual Aid",
            "maxLength": 255,
            "minLength": 3,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SimpleResponse": {
        "properties": {
          "message": {
            "default": "OK",
            "description": "The result of this operation.",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "SinglePeriodImgModelStats": {
        "properties": {
          "*": {
            "additionalProperties": {
              "description": "The amount of requests fulfilled for this model.",
              "type": "integer"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SinglePeriodImgStat": {
        "properties": {
          "images": {
            "description": "The amount of images generated during this period.",
            "type": "integer"
          },
          "ps": {
            "description": "The amount of pixelsteps generated during this period.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SinglePeriodTxtModelStats": {
        "properties": {
          "*": {
            "additionalProperties": {
              "description": "The amount of requests fulfilled for this model.",
              "type": "integer"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "StatsImgTotals": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "hour": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "minute": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "month": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "total": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          }
        },
        "type": "object"
      },
      "StatsTxtTotals": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "hour": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "minute": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "month": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          },
          "total": {
            "$ref": "#/components/schemas/SinglePeriodImgStat"
          }
        },
        "type": "object"
      },
      "SubmitInput": {
        "properties": {
          "generation": {
            "description": "R2 result was uploaded to R2, else the string of the result.",
            "example": "R2",
            "type": "string"
          },
          "id": {
            "description": "The UUID of this generation.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "state": {
            "default": "ok",
            "description": "The state of this generation.",
            "enum": [
              "ok",
              "censored",
              "faulted",
              "csam"
            ],
            "example": "ok",
            "title": "Generation State",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "SubmitInputKobold": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmitInput"
          },
          {
            "properties": {
              "gen_metadata": {
                "items": {
                  "$ref": "#/components/schemas/GenerationMetadataKobold"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "SubmitInputStable": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SubmitInput"
          },
          {
            "properties": {
              "censored": {
                "default": false,
                "description": "OBSOLETE (start using meta): If True, this resulting image has been censored.",
                "type": "boolean"
              },
              "gen_metadata": {
                "items": {
                  "$ref": "#/components/schemas/GenerationMetadataStable"
                },
                "type": "array"
              },
              "seed": {
                "description": "The seed for this generation.",
                "type": "integer"
              }
            },
            "required": [
              "seed"
            ],
            "type": "object"
          }
        ]
      },
      "TeamDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamDetailsLite"
          },
          {
            "properties": {
              "info": {
                "description": "Extra information or comments about this team provided by its owner.",
                "example": "Anarchy is emergent order.",
                "type": "string"
              },
              "creator": {
                "description": "The alias of the user which created this team.",
                "example": "db0#1",
                "type": "string"
              },
              "kudos": {
                "description": "How many Kudos the workers in this team have been rewarded while part of this team.",
                "type": "number"
              },
              "models": {
                "items": {
                  "$ref": "#/components/schemas/ActiveModelLite"
                },
                "type": "array"
              },
              "requests_fulfilled": {
                "description": "How many images this team's workers have generated.",
                "type": "integer"
              },
              "uptime": {
                "description": "The total amount of time workers have stayed online while on this team.",
                "type": "integer"
              },
              "worker_count": {
                "description": "How many workers have been dedicated to this team.",
                "example": 10,
                "type": "integer"
              },
              "workers": {
                "items": {
                  "$ref": "#/components/schemas/WorkerDetailsLite"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "TeamDetailsLite": {
        "properties": {
          "id": {
            "description": "The UUID of this team.",
            "type": "string"
          },
          "name": {
            "description": "The Name given to this team.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TxtModelStats": {
        "properties": {
          "day": {
            "$ref": "#/components/schemas/SinglePeriodTxtModelStats"
          },
          "month": {
            "$ref": "#/components/schemas/SinglePeriodTxtModelStats"
          },
          "total": {
            "$ref": "#/components/schemas/SinglePeriodTxtModelStats"
          }
        },
        "type": "object"
      },
      "UsageDetails": {
        "properties": {
          "megapixelsteps": {
            "description": "How many megapixelsteps this user has requested.",
            "type": "number"
          },
          "requests": {
            "description": "How many images this user has requested.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserAmountRecords": {
        "properties": {
          "image": {
            "default": 0,
            "description": "How many images this user has generated or requested.",
            "type": "integer"
          },
          "interrogation": {
            "default": 0,
            "description": "How many texts this user has generated or requested.",
            "type": "integer"
          },
          "text": {
            "default": 0,
            "description": "How many texts this user has generated or requested.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserDetails": {
        "properties": {
          "account_age": {
            "description": "How many seconds since this account was created.",
            "example": 60,
            "type": "integer"
          },
          "admin_comment": {
            "description": "(Privileged) Information about this users by the admins",
            "example": "User is sus",
            "type": "string"
          },
          "concurrency": {
            "description": "How many concurrent generations this user may request.",
            "type": "integer"
          },
          "contact": {
            "description": "(Privileged) Contact details for the horde admins to reach the user in case of emergency.",
            "example": "email@example.com",
            "type": "string"
          },
          "contributions": {
            "$ref": "#/components/schemas/ContributionsDetails"
          },
          "education": {
            "description": "This is an education account used schools and universities.",
            "example": false,
            "type": "boolean"
          },
          "evaluating_kudos": {
            "description": "(Privileged) The amount of Evaluating Kudos this untrusted user has from generations and uptime. When this number reaches a prespecified threshold, they automatically become trusted.",
            "type": "number"
          },
          "flagged": {
            "description": "(Privileged) This user has been flagged for suspicious activity.",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "The user unique ID. It is always an integer.",
            "type": "integer"
          },
          "kudos": {
            "description": "The amount of Kudos this user has. The amount of Kudos determines the priority when requesting image generations.",
            "type": "number"
          },
          "kudos_details": {
            "$ref": "#/components/schemas/UserKudosDetails"
          },
          "moderator": {
            "description": "This user is a AI Horde moderator.",
            "example": false,
            "type": "boolean"
          },
          "monthly_kudos": {
            "$ref": "#/components/schemas/MonthlyKudos"
          },
          "pseudonymous": {
            "description": "If true, this user has not registered using an oauth service.",
            "example": false,
            "type": "boolean"
          },
          "records": {
            "$ref": "#/components/schemas/UserRecords"
          },
          "service": {
            "description": "This is a service account used by a horde proxy.",
            "example": false,
            "type": "boolean"
          },
          "sharedkey_ids": {
            "items": {
              "description": "(Privileged) The list of shared key IDs created by this user.",
              "example": "00000000-0000-0000-0000-000000000000",
              "type": "string"
            },
            "type": "array"
          },
          "special": {
            "description": "(Privileged) This user has been given the Special role.",
            "example": false,
            "type": "boolean"
          },
          "suspicious": {
            "description": "(Privileged) How much suspicion this user has accumulated.",
            "example": 0,
            "type": "integer"
          },
          "trusted": {
            "description": "This user is a trusted member of the AI Horde.",
            "example": false,
            "type": "boolean"
          },
          "usage": {
            "$ref": "#/components/schemas/UsageDetails"
          },
          "username": {
            "description": "The user's unique Username. It is a combination of their chosen alias plus their ID.",
            "type": "string"
          },
          "vpn": {
            "description": "(Privileged) This user has been given the VPN role.",
            "example": false,
            "type": "boolean"
          },
          "worker_count": {
            "description": "How many workers this user has created (active or inactive).",
            "type": "integer"
          },
          "worker_ids": {
            "items": {
              "description": "Privileged or public when the user has explicitly allows it to be public.",
              "example": "00000000-0000-0000-0000-000000000000",
              "type": "string"
            },
            "type": "array"
          },
          "worker_invited": {
            "description": "Whether this user has been invited to join a worker to the AI Horde and how many of them. When 0, this user cannot add (new) workers to the horde.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserKudosDetails": {
        "properties": {
          "accumulated": {
            "default": 0,
            "description": "The ammount of Kudos accumulated or used for generating images.",
            "type": "number"
          },
          "admin": {
            "default": 0,
            "description": "The amount of Kudos this user has been given by the AI Horde admins.",
            "type": "number"
          },
          "awarded": {
            "default": 0,
            "description": "The amount of Kudos this user has been awarded from things like rating images.",
            "type": "number"
          },
          "donated": {
            "default": 0,
            "description": "The amount of Kudos this user has donated to public goods accounts like education.",
            "type": "number"
          },
          "gifted": {
            "default": 0,
            "description": "The amount of Kudos this user has given to other users.",
            "type": "number"
          },
          "received": {
            "default": 0,
            "description": "The amount of Kudos this user has been given by other users.",
            "type": "number"
          },
          "recurring": {
            "default": 0,
            "description": "The amount of Kudos this user has received from recurring rewards.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "UserRecords": {
        "properties": {
          "contribution": {
            "$ref": "#/components/schemas/UserThingRecords"
          },
          "fulfillment": {
            "$ref": "#/components/schemas/UserAmountRecords"
          },
          "request": {
            "$ref": "#/components/schemas/UserAmountRecords"
          },
          "usage": {
            "$ref": "#/components/schemas/UserThingRecords"
          }
        },
        "type": "object"
      },
      "UserThingRecords": {
        "properties": {
          "megapixelsteps": {
            "default": 0,
            "description": "How many megapixelsteps this user has generated or requested.",
            "type": "number"
          },
          "tokens": {
            "default": 0,
            "description": "How many token this user has generated or requested.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WorkerDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkerDetailsLite"
          },
          {
            "properties": {
              "info": {
                "description": "Extra information or comments about this worker provided by its owner.",
                "example": "https://dbzer0.com",
                "type": "string"
              },
              "bridge_agent": {
                "default": "unknown:0:unknown",
                "description": "The bridge agent name, version and website.",
                "example": "AI Horde Worker reGen:4.1.0:https://github.com/Haidra-Org/horde-worker-reGen",
                "maxLength": 1000,
                "type": "string"
              },
              "contact": {
                "description": "(Privileged) Contact details for the horde admins to reach the owner of this worker in emergencies.",
                "example": "email@example.com",
                "maxLength": 500,
                "minLength": 5,
                "type": "string"
              },
              "flagged": {
                "description": "The worker's owner has been flagged for suspicious activity. This worker will not be given any jobs to process.",
                "type": "boolean"
              },
              "forms": {
                "items": {
                  "description": "Which forms this worker if offering.",
                  "type": "string"
                },
                "type": "array"
              },
              "img2img": {
                "description": "If True, this worker supports and allows img2img requests.",
                "type": "boolean"
              },
              "ipaddr": {
                "description": "Privileged. The last known IP this worker has connected from.",
                "example": "username#1",
                "type": "string"
              },
              "kudos_details": {
                "$ref": "#/components/schemas/WorkerKudosDetails"
              },
              "kudos_rewards": {
                "description": "How many Kudos this worker has been rewarded in total.",
                "type": "number"
              },
              "lora": {
                "description": "If True, this worker supports and allows lora requests.",
                "type": "boolean"
              },
              "maintenance_mode": {
                "description": "When True, this worker will not pick up any new requests.",
                "example": false,
                "type": "boolean"
              },
              "max_context_length": {
                "description": "The maximum tokens this worker can read.",
                "example": 80,
                "type": "integer"
              },
              "max_length": {
                "description": "The maximum tokens this worker can generate.",
                "example": 80,
                "type": "integer"
              },
              "max_pixels": {
                "description": "The maximum pixels in resolution this worker can generate.",
                "example": 262144,
                "type": "integer"
              },
              "megapixelsteps_generated": {
                "description": "How many megapixelsteps this worker has generated until now.",
                "type": "number"
              },
              "models": {
                "items": {
                  "description": "Which models this worker if offering.",
                  "type": "string"
                },
                "type": "array"
              },
              "nsfw": {
                "default": false,
                "description": "Whether this worker can generate NSFW requests or not.",
                "type": "boolean"
              },
              "owner": {
                "description": "Privileged or public if the owner has allowed it. The alias of the owner of this worker.",
                "example": "username#1",
                "type": "string"
              },
              "painting": {
                "description": "If True, this worker supports and allows inpainting requests.",
                "type": "boolean"
              },
              "paused": {
                "description": "(Privileged) When True, this worker not be given any new requests.",
                "example": false,
                "type": "boolean"
              },
              "performance": {
                "description": "The average performance of this worker in human readable form.",
                "type": "string"
              },
              "post-processing": {
                "description": "If True, this worker supports and allows post-processing requests.",
                "type": "boolean"
              },
              "requests_fulfilled": {
                "description": "How many images this worker has generated.",
                "type": "integer"
              },
              "suspicious": {
                "description": "(Privileged) How much suspicion this worker has accumulated.",
                "example": 0,
                "type": "integer"
              },
              "team": {
                "$ref": "#/components/schemas/TeamDetailsLite"
              },
              "threads": {
                "description": "How many threads this worker is running.",
                "type": "integer"
              },
              "tokens_generated": {
                "description": "How many tokens this worker has generated until now.",
                "type": "number"
              },
              "trusted": {
                "description": "The worker is trusted to return valid generations.",
                "type": "boolean"
              },
              "uncompleted_jobs": {
                "description": "How many jobs this worker has left uncompleted after it started them.",
                "example": 0,
                "type": "integer"
              },
              "uptime": {
                "description": "The amount of seconds this worker has been online for this AI Horde.",
                "type": "integer"
              }
            },
            "required": [
              "bridge_agent"
            ],
            "type": "object"
          }
        ]
      },
      "WorkerDetailsLite": {
        "properties": {
          "id": {
            "description": "The UUID of this worker.",
            "type": "string"
          },
          "name": {
            "description": "The Name given to this worker.",
            "type": "string"
          },
          "online": {
            "description": "True if the worker has checked-in the past 5 minutes.",
            "type": "boolean"
          },
          "type": {
            "description": "The Type of worker this is.",
            "enum": [
              "image",
              "text",
              "interrogation"
            ],
            "example": "image",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkerKudosDetails": {
        "properties": {
          "generated": {
            "description": "How much Kudos this worker has received for generating images.",
            "type": "number"
          },
          "uptime": {
            "description": "How much Kudos this worker has received for staying online longer.",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "tags": [
    {
      "description": "API Version 2",
      "name": "v2"
    }
  ]
}
